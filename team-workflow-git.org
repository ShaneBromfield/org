#+Title: Team workflow git
#+author: Antoine Romain Dumont
#+STARTUP: indent
#+STARTUP: hidestars odd

Here is one possible workflow!
Feel free to discuss it and/or patch it!

* For each developer, here is how we start the retrieval of a project
*** Log into the console cloudbees https://webadeo.forge.cloudbees.com/
***** Here we can see a list of git repositories.
***** Choose the one needed.
*** Clone this repository from cloudbees to local
***** Go to the desired folder to receive the clone of the repository
Exemple : 
#+BEGIN_SRC sh
cd ~/repositories/pro/
#+END_SRC
***** Then clone the repository
#+BEGIN_SRC sh
git clone adress-of-the-repository-cloudbees
#+END_SRC

Example:
#+BEGIN_SRC sh
git clone ssh://git@git.cloudbees.com/webadeo/wikeo-core.git
#+END_SRC sh

*** We create a branch from master to develop our fix or our User Story
#+BEGIN_SRC sh
git checkout -b trigram-user/branch-name
#+END_SRC

Example : 
#+BEGIN_SRC sh
git checkout -b adu/devUS154ImportModel
#+END_SRC
*** Regularly, return to master to synchronize the source

#+BEGIN_SRC sh
git checkout master && git pull
#+END_SRC

Remark : If it refuses, you made a mistake. It means you have changes
locally that you did not commit to your index.
Before returning to master, make sur you have commited everything in
your index for your branch (or dropped it if it is useless to you).

Remark 2:
These commands are your best friends, ask them to help you out!

#+BEGIN_SRC sh
git status
#+END_SRC
and 
#+BEGIN_SRC sh
gitk --all
#+END_SRC
*** Now, we're synchronized with master, we return to our branch and merge these changes inside our branch.
***** Return to our branch
#+BEGIN_SRC sh
git checkout trigram-user/branch-name
#+END_SRC
***** Merge the content of master into our branch
#+BEGIN_SRC sh
git merge master
#+END_SRC

Everything ok ?
If everything is merging without problems, continue.

Else, there were conflits during merge.
We must fix these conflicts manually.
Open your favourite ide or editor and choose what you want to keep or not depending on the situation.
When all conflicts are resolved and that all your tests are ok, add
all the files modified to the index, commit and that's all folks!

#+BEGIN_SRC sh
git status
git add yourFileModified yourFile2Modified
git commit
#+END_SRC

***** Why must i merge master into my branch ?
******* To make sure what i'm doing still works with the latest code!
******* If not, you will surely break the code into master when you'll merge your fix or dev!
***** What if master is broken ?
******* Not possible... or not!
********* Very strong assertion : Master must be stable!
*********** How can we be sure of such assertion ?
************* Continous integration !
************* Code review tool such as Gerrit!
** I've done my dev, what do i do ?
***** Check these assertions :
******* Is all your code commited to your branch?
******* Is your dev done?
******* Are all your unit-tests ok?
******* Are all your functional-tests or integration-tests ok ?
******* Does your app deploy and work as expected ?
*** Ok then, it's time to aggregate your commits into one!
******* Create a new intermediary branch. Call it for example, USXYZ. 
I think that, for simplicity's sake, it's best suited that this branch be local. This way, you're sure about what's inside it!

#+BEGIN_SRC sh
git checkout -b USXYZ/merge/1
#+END_SRC
or
#+BEGIN_SRC sh
git branch USXYZ/merge/1 && git checkout USXYZ/merge/1
#+END_SRC
******* Check how many commits you have on your branch (use gitk --all for this), for example "n"
#+BEGIN_SRC sh
gitk --all &
#+END_SRC
******* You do not need to merge the content of your branch trigram-user/branch-name into USXYZ/merge/1 because you created this branch from trigram-user/branch-name
******* Now we squash the commits into one
********* Launch the command
#+BEGIN_SRC sh
git rebase -i HEAD~n
#+END_SRC
(with n a number representing your number of commits)
********* One editor launches itself and present you a list of commit
#+BEGIN_SRC text
pick f3525c2 Delete files and add directory which do not need to be on git.
pick a590b12 Add bin directory which do not need to be on git too.
#+END_SRC
********* Replace each "pick" verb by a "s" or "squash" except the first one (first line).
#+BEGIN_SRC text
pick f3525c2 Delete files and add directory which do not need to be on git.
s a590b12 Add bin directory which do not need to be on git too.
#+END_SRC
********* Save your changes
********* You will now be presented with a relatively identical ihm but with only one comment, this is the comment of the line you keep previously
#+BEGIN_SRC text
# This is a combination of 2 commits.
# The first commit's message is:

Delete files which do not need to be on git.

# This is the 2nd commit message:

Add bin directory which do not need to be on git too.
# Please enter the commit message for your changes.
#...
# list of files for the commit
#+END_SRC
********* Change the comment to match your user story of fix.
*********** Exemple : This is the user story XYZ which deals with the content import.
# This is a combination of 2 commits.
# The first commit's message is:

Delete files and add directory to gitignore which do not need to be on git.

********* Check again that everything (unit-tests, integration-tests...) are ok!
***** Now we merge into master!
******* Return to master 
#+BEGIN_SRC sh
git checkout master
#+END_SRC
******* Merge the content of the "merging branch" into master
#+BEGIN_SRC sh
git merge USXYZ/merge/1
#+END_SRC
******* Send your modifications to master! 
#+BEGIN_SRC sh
git push
#+END_SRC
******* What if there are problems ?
It means "somebody, somebody put something in your drink"!
It means really that someone pushed something before you did finish
your merge.
You must once again merge your branch and the master.
#+BEGIN_SRC sh
# synchronize with everybody... (needs somebody to love!)
git pull
# Return to your branch
git checkout user-trigram/branch-name
# Merge the content of master into your branch
git merge master
# fix eventual merge conflicts and check your tests (add the merge
into the index and commit)
# Create a new branch of merging
git checkout -b USXYZ/merge/2
# fix eventual merge conflicts and check your tests
# return to master
git checkout master
# Merge the content of the branch into master
git merge USXYZ/merge/2
git push
# pray that someone did not push something again on the master!!!
#+END_SRC
***** Now, you're done!!!
