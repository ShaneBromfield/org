#+title: Docker notes
#+author: ardumont

* Definition
|-------------------+-----------------------------------------------------------------+--------------|
| Notion            | Definition                                                      | Component    |
|-------------------+-----------------------------------------------------------------+--------------|
| Docker images     | read-only template of an OS                                     | Build        |
| Docker registries | Public/Private store to hold images. Ex: http://hub.docker.com/ | Distribution |
| Docker containers | Isolated and secure platform to run application.                | Run          |
|                   | It can be started, stopped, moved, deleted.                     |              |
|-------------------+-----------------------------------------------------------------+--------------|

* Install

** Ubuntu
OS on ubuntu 12.04 or 13.10:
#+begin_src sh
# Install docker
curl -s https://get.docker.io/ubuntu/ | sudo sh
# Add the current user to docker group
sudo gpasswd -a $USER docker
# Logout the user and login again for the configuration to be taken into account
logout
#+end_src

** NixOS

Add the package nixos.

#+begin_src nix
{ config, pkgs, ... }:

{
  environment.systemPackages = with pkgs; [
    docker
}
#+end_src

Add the group docker to the user's default group. For example:

#+begin_src nix
  users = {
    defaultUserShell = "/var/run/current-system/sw/bin/zsh";

    # Define a user account. Don't forget to set a password with ‘passwd’.
    extraUsers = [{
      description = "Antoine R. Dumont";
      name = "tony";
      group = "users";
      uid = 1000;
      createHome = true;
      home = "/home/tony";
      extraGroups = [ "users" "wheel" "audio" "video" "vboxusers" "docker" ];
      useDefaultShell = true;
    }];
  };
#+end_src

Update your nix:

#+begin_src sh
sudo nixos-rebuild switch
#+end_src

*Note*
If this does not work (you know, shit happens), you can do it manually.

#+begin_src sh
sudo groupadd docker
sudo gpasswd -a $USER docker
#+end_src

** Check

To check the installation is ok:

#+begin_src sh
docker run -t -i ubuntu /bin/bash
#+end_src

* Search

** Remotely

Search existing images in central index:
#+begin_src sh
docker search debian
#+end_src

** locally

To list current installed images:
#+begin_src sh
docker images
#+end_src

* Pull

Retrieve the debian image from the default repository ([[http://hub.docker.com/][docker hub]]):

#+begin_src sh
docker pull debian
#+end_src

* Run

** Command

Run command in a container:
#+begin_src sh
CONTAINER_ID=$(docker run -d debian /bin/sh -c "echo hello")
#+end_src

** Interactive

Run interactive command in a container:
#+begin_src sh
docker run -t -i ubuntu /bin/bash
#+end_src

* Ps

Monitor the container:
#+begin_src sh
docker ps
#+end_src

Sample:
#+begin_src sh
$ docker ps
CONTAINER ID        IMAGE               COMMAND                CREATED             STATUS              PORTS               NAMES
ccc70474b671        ubuntu:12.04        /bin/sh -c while tru   3 minutes ago       Up 3 minutes                            condescending_Morse
#+end_src

* Stop

Stop the container:
#+begin_src sh
docker stop $CONTAINER_ID
#+end_src

* Kill

Kill a job:
#+begin_src sh
docker kill $CONTAINER_ID
#+end_src

* Bind

Bind a service on a tcp port:
#+begin_src sh
# Bind port 4444 of this container, and tell netcat to listen on it
JOB=$(docker run -d -p 4444 ubuntu:12.10 /bin/nc -l 4444)

# Which public port is NATed to my container?
PORT=$(docker port $JOB 4444 | awk -F: '{ print $2 }')

# Connect to the public port
echo hello world | nc 127.0.0.1 $PORT

# Verify that the network connection worked
echo "Daemon received: $(sudo docker logs $JOB)"
#+end_src

* Commit

Save the current state of a container by commit:
#+begin_src sh
docker commit <container-id> <commit-message>
#+end_src

* Dockerfile

** Basic file

A Dockerfile is a simple text file which defines the instructions to be played from a given images.

Sample:
#+begin_src Dockerfile
from ubuntu:13.10
run echo "deb http://archive.ubuntu.com/ubuntu saucy main universe" > /etc/apt/sources.list
run apt-get update
run apt-get install -y memcached
#+end_src

Note:
- The `from` states from which images we should start the following actions.
- The `run` instructions are the equivalent commands of the run command `docker run...`

** Build

To build from docker file (default to current Dockerfile), use the docker build command:
#+begin_src sh
docker build -t ardumont/image-name .
#+end_src

*Note*
This will:
- name the container ardumont/image-name
- load the current `Dockerfile` present in directory.

** Build with specific Dockerfile name

If the docker file has a different name, you can always use this:
#+begin_src sh
docker build - < Dockerfile-with-a-specific-name
#+end_src

** Naming images after the build

#+begin_src sh
docker build -t <image-name>
#+end_src

At the end of the build, listing the images will display a new image with name <image-name>
