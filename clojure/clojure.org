#+TITLE: Clojure
#+AUTHOR: ardumont
#+STARTUP: indent
#+TOC: nil

Presenting clojure with my own words

* Clojure fast
** [[Http://clojure.org/functional_programming][Functional programming]] language
** Runs on the JVM
** [[http://en.wikipedia.org/wiki/Lisp_%28programming_language%29][Dialect of LISP]]!
* Purpose?
** General-purpose language
** Ease of development in mind
** Avoid incidental complexity
I will not define 'incidental complexity' but instead [[http://www.simple-talk.com/opinion/geek-of-the-week/rich-hickey-geek-of-the-week/][quote]] the clojure creator, [[https://plus.google.com/101598622654270873929/posts][Rich Hikey]]

#+BEGIN_SRC quote
"I think programmers have become
inured to incidental complexity...
when they encounter complexity,
they consider it a challenge to overcome,
rather than an obstacle to remove.
Overcoming complexity isn't work, it's waste."
#+END_SRC

Tools:
- deals with:
  - memory (as does java)
  - concurrency
- native tools:
  - feedback (REPL)
  - idiomatic immutability
  - focus on the problem at hand

* Functionalities?
** [[http://clojure.org/functional_programming][Functional programming]]
- Reasoning
- Data are de facto immutable
- Function are first class citizen
- Higher Order Function
  - inputs -> output
  - function can manipulate other functions
- lazy?
  Not everywhere but the basic construction are lazy (map, filter, iterate, etc...)

Simple example, a decorator:
#+BEGIN_SRC clojure
 (defn debug [s] "debug decorator"
    (println (format "debug: %s!" s))
    s)
#+END_SRC

** JVM
- Generates byte code
- Interoperability

** LISP
- Exists since the programming language's dawn of time (1958).
- Homoiconic: code is data and data is code
- no syntax

** Dynamic
- Compilation transparent
- Directly interact with the language via the REPL (Read-Eval-Print-Loop).

** Homoiconic - code is data and data is code
- No differenciation between the core code and your code
- Native extension
- Macros

** Immutability

** Persistent data structure
- Simple concurrent programming
- Software Transaction Memory system
- Agent
- For optimization: type hint to avoid reflection.

** Limits
- no type
- not pure (I/O possible)
- not fully lazy
