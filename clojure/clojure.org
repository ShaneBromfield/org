#+TITLE: Clojure
#+AUTHOR: ardumont
#+STARTUP: indent
#+OPTIONS: toc:nil
#+DESCRIPTION: Presenting clojure
#+REVEAL_THEME: default
#+REVEAL_TRANS: fade
#+REVEAL_SPEED: 0

* Who am I?

#+begin_src clojure
{:github  "@ardumont"
 :twitter "@ardumont"
 :work    "developer/devops"}
#+end_src

* TL; DR

- [[Http://clojure.org/functional_programming][Functional programming]] language

- Runs on the JVM

- [[http://en.wikipedia.org/wiki/Lisp_(programming_language)][Dialect of LISP]]!

* Java / Clojure

Filter a list of records according the record's name "some-value"
and convert such record to a `converted` record.

** Java

#+BEGIN_SRC java
/**
 * Some records list conversion.
 */
public List<ConvertedRecord> convertRecords(final List<Record> records) {
  final List<ConvertedRecord> convertedRecords = new ArrayList();
  for (final Record record : records) {
    if("some-value".equals(record.getName())) {
      convertedRecords.add(convert(record));
    }
  }
  return convertedRecords;
}
#+END_SRC

*Note* Filtering and conversion are intertwined.

** Clojure

#+begin_src clojure
(defn convert-records [records] "Some records list conversion."
  (map convert (filter (comp #(= "some-value" %) get-name) records)))
#+end_src

*Note* Filtering and conversion are 2 distincts steps.

** Clojure (2)

Threading the data.

#+begin_src clojure
(defn convert-records [records] "Some records list conversion."
  (->> records
       (filter (comp #(= "some-value" %) get-name)) ;; filter a records list
       (map convert))                               ;; and convert...
#+end_src

* Purpose?

- General-purpose language

- Ease of development

- incidental complexity is not work but waste

- native tools (concurrency API, REPL, immutability)

* How?

** [[http://clojure.org/functional_programming][Functional programming]]

- Data are de facto immutable (persistent data structure)

- Functions (higher order functions, first class citizen, ...)

- Lazyness (basic constructions: map, filter, iterate, etc...)

** LISP

- Dawn of programming language's time (1958)

- Homoiconicity

- No syntax

** JVM

- Access to native platform primitives

- Interoperability

- Generates native byte code

** Dynamic

- Interact via REPL

- Compilation transparent

** Homoiconic

- data <=> code

- Macros

- Extensions beside core

** Concurrency

- (not= identity state)

- STM

- Future, Promise, Agent, Atom, etc...

* Limits

- No type

- Not pure -> side effects

- Partially lazy

* Question?

* Code

[[http://infinite-citadel-3625.herokuapp.com/][clj-jam]]
