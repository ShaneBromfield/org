#+TITLE: Clojure
#+AUTHOR: ardumont
#+STARTUP: indent

Presenting clojure with my own words

* Clojure fast
** [[Http://clojure.org/functional_programming][Functional programming]] language
** Runs on the JVM
** [[http://en.wikipedia.org/wiki/Lisp_%28programming_language%29][Dialect of LISP]]!
* Purpose?
** General-purpose language
** Ease of development in mind
** Avoid incidental complexity
I will not define 'incidental complexity' but instead [[http://www.simple-talk.com/opinion/geek-of-the-week/rich-hickey-geek-of-the-week/][quote]] the clojure creator, [[https://plus.google.com/101598622654270873929/posts][Rich Hikey]]

#+BEGIN_SRC quote
"I think programmers have become
inured to incidental complexity...
when they encounter complexity,
they consider it a challenge to overcome,
rather than an obstacle to remove.
Overcoming complexity isn't work, it's waste."
#+END_SRC

Tools:
- deals with:
  - memory (as does java)
  - concurrency
- native tools:
  - feedback (REPL)
  - idiomatic immutability
  - focus on the problem at hand

* Functionalities?
** [[http://clojure.org/functional_programming][Functional programming]]
- Considered as more robust.
- Data are de facto immutable
- First class function - function can manipulate other functions
- higher order function - many inputs, one output.

#+BEGIN_SRC clj
(def hello
  (fn [n]
    (println
      (str "hello " n "!"))))
;;user> (hello "tony")
;;"hello tony!"
;;nil
#+END_SRC

** JVM
- generates byte code
- interoperability with java
- can call the java library to use them inside clojure programs
** LISP
- exists since the programming language's dawn of time (1958).
- homoiconic: code is data and data is code
** Dynamic
- No compilation and running phases
- Directly interact with the language via the REPL (Read-Eval-Print-Loop).
** Scripting
** Homoiconic - code is data and data is code
** Macros
** Immutability
** Persistent data set
- Simple concurrent programming
- Software Transaction Memory system
- Agent
- For optimization: type hint to avoid reflection.
