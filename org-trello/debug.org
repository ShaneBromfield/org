#+title: towards debugging org-trello
#+author: ardumont

* REPL

Using ielm here:

#+begin_src emacs
M-x ielm <RET>
#+end_src

Set the credentials for your account:
#+begin_src lisp
(let ((org-trello--user-logged-in "<user>")) (orgtrello-controller/load-keys!))
#+end_src
Note: Load in context the credentials from the file `~/.emacs.d/.trello/<user>.el`

Now execute some request to check that the connection is good:
#+begin_src lisp
ELISP> (orgtrello-query-http-trello (orgtrello-api-get-me) 'sync)
#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data
              (:username "ardumont" :url "https://trello.com/ardumont" :status "disconnected" :full-name "Antoine R. Dumont" :id "aabbccddeeffgghhiijjkk"))
#+end_src

Note:
You can have a pretty good idea of org-trello's api by reading the `org-trello-api.el` file.
It's trello's api adapter.

* Trace

emacs comes with `trace-fn` function.
This can help a lot.

Identify some function you want to trace (display inputs, output), for example:
#+begin_src lisp
(trace-function 'orgtrello-data-parse-data)
;; (untrace-function 'orgtrello-data-parse-data)
#+end_src
Note:
`orgtrello-data/parse-data` is the central function used to parse the json output of trello.
So in case of output doubt, this can be a good starting point.

** trace-functions

To trace mutliple ones:
#+begin_src lisp
So much that I added my own based on this for dev:
#+begin_src lisp
(defun trace-functions (fns)
  "Trace functions FNS."
  (mapc 'trace-function fns))

(defun untrace-functions (fns)
  "Trace functions FNS."
  (mapc 'untrace-function fns))
#+end_src

With sample:
#+begin_src lisp
(trace-functions '(orgtrello-data/parse-data))
;; (untrace-functions '(orgtrello-data/parse-data))
#+end_src

* Display the content of the board's global setup

Inside the current org-trello buffer:

M-: (orgtrello-setup-display-current-buffer-setup!)

This will compute and return a list with the important settings.

Something like:
#+begin_src lisp
(:users-id-name #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("user-id0" "orgtrello-user-antoineromaindumont" "user-id2" "orgtrello-user-orgmode" "user-id3" "orgtrello-user-ardumont" "ardumont" "orgtrello-user-me" ...))
 :users-name-id #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("orgtrello-user-antoineromaindumont" "user-id0" "orgtrello-user-orgmode" "user-id3" "orgtrello-user-ardumont" "user-id1" "orgtrello-user-me" "ardumont" ...))
 :user-logged-in "ardumont"
 :org-keyword-trello-list-names ("TODO" "IN-PROGRESS" "DONE" "PENDING" "DELEGATED" "FAILED" "CANCELLED")
 :org-keyword-id-name #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("todo-id" "TODO" "in-progress-id" "IN-PROGRESS" "done-id" "DONE" "pending-id" "PENDING" "delegated-id" "DELEGATED" "failed-id" "FAILED" "cancelled-id" "CANCELLED" ...)))
#+end_src

This can help to see if something is amiss or not.
