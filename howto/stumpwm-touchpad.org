#+BLOG: tony-blog
#+POSTID: 763
#+DATE: [2012-12-29 sam. 15:43]
#+TITLE: Stumpwm - Activate/Deactivate touchpad
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: stumpwm, tools, touchpad
#+CATEGORY: stumpwm, howto, tools
#+DESCRIPTION: Show how to activate/deactivate touchpad depending on the soft you use
#+STARTUP: indent
#+STARTUP: hidestars

As I recently changed my hardware, I got a new portable with a *HUGE* touchpad (at least for me).
Thus, when I type with my keyboard, it gets in the way.

So a new need came up, Shell/Stumpwm power to the rescue:
- [[http://adumont.fr/blog/activatedeactivate-touchpad-from-the-shell/][I want to be able to disable/enable my touchpad]] DONE!
- When switching to emacs or a terminal, I want it to be disabled!
- When switching back to the browsers or other mouse-needed software, I want to enable it back.

As I [[http://adumont.fr/blog/activatedeactivate-touchpad-from-the-shell/][recently posted on how to activate/deactivate the touchpad from the shell command]], in this post, I will use those bricks to improve my condition using [[http://www.nongnu.org/stumpwm/][stumpwm]].

* Manually

** Why?
There will be times or I will need to toggle on/off the touchpad manually.

I'm aware that there already exists a native binding (=fn F9= on my keyboard) but it breaks my hands positions.
So a more natural binding would be for example =C-t T=.

** code
Helper function:
#+begin_src lisp
(defun run-shl (&rest cmd)
  "A simpler command to run-shell-command with multiple params"
  (run-shell-command (apply #'concatenate 'string cmd)))
#+end_src

The main code whose only concern is to:
- reuse the script [[http://adumont.fr/blog/activatedeactivate-touchpad-from-the-shell/][toggle-touchpad.sh described here]]:
- banish the mouse from the screen (the mouse is positionned at the bottom right of the screen)

#+begin_src lisp
(defcommand toggle-touchpad-auto () ()
  "Activate/Deactivate automatically the touchpad depending on the current status."
  (run-shl "~/bin/touchpad/toggle-touchpad.sh")
  (stumpwm::banish))
#+end_src

Then the binding:
#+begin_src lisp
(define-key *root-map* (kbd "T") "toggle-touchpad-auto")
#+end_src

* Automatic

** Definition

The main subject was how to to make the switch automatic regarding the software.

As we have already the hand on the command to call, we have to modify the call.

I declared common-lisp macros *roraise-and-touchpad-on*, *roraise-and-touchpad-off* that takes the :
- *command* shell to run or raise (if the instance does not run, we start it, else we raise it, that is we give it the main focus)
- and *class* they belong to.

#+begin_src lisp
(defmacro roraise-and-touchpad-off (command class)
  "Wrap a call to the run-or-raise command but before toggle off the touchpad."
  `(progn
     (toggle-touchpad-manual "0")
     (run-or-raise ,command '(:class ,class))))

#+end_src

** Example off
Then for example, the =defcommand= (which is a macro) *emacs*, in its definition, instead of calling directly *run-or-raise*, calls *roraise-and-touchpad-off*.

This way, we pass from this:

#+begin_src lisp
(defcommand myemacs () ()
  "Run an xterm instance or if already running, switch to it."
  ;; raise emacs
  (run-or-raise "emacsclient -c" "Emacs24"))
#+end_src

#+end_src

to this:

#+begin_src lisp
(defcommand myemacs () ()
  "Run an xterm instance or if already running, switch to it."
  ;; raise emacs
  (roraise-and-touchpad-off "emacsclient -c" "Emacs24"))
#+end_src

The binding does not change:

#+begin_src lisp
(define-key *root-map* (kbd "e") "myemacs")
#+end_src

** Example on

Here we want to reactivate the touchpad when switching back to the browser.

#+begin_src lisp
(defcommand chromium-browser () ()
  "Run a chromium instance or if already running, switch to it."
  (roraise-and-touchpad-on "chromium-browser" "Chromium-browser"))
#+end_src

The binding has always does not change.
#+begin_src lisp
(define-key *root-map* (kbd "b") "chromium-browser")
#+end_src

* Setup
As usual, here is a snapshot of my actual setup.

#+INCLUDE: "~/.stumpwmrc" src lisp

* Conclusion

A great way to know if a tool is a good tool or not is to know if it is extendable or not.
To sum up, good tools provides you the means to extend them.

In this way, Stumpwm rocks at least as much as emacs!
Indeed, much like emacs, you do not have to get used to it, you shape it along the route according to your needs!
