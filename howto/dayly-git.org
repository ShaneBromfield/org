#+BLOG: tony-blog
#+POSTID: 675
#+DATE: [2012-12-25 Tue 16:09]
#+TITLE: Daily git
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: emacs, git, aliases
#+CATEGORY: emacs, git
#+DESCRIPTION: How do i use git every day
#+STARTUP: indent
#+STARTUP: hidestars

In another post, I presented my git aliases.
In this one, I will present the commands I use everyday with git.
- [[http://en.wikipedia.org/wiki/Command-line_interface][CLI]]
- [[http://philjackson.github.com/magit/magit.html][magit]] through [[http://www.gnu.org/s/emacs/][emacs]]

I prefer [[http://philjackson.github.com/magit/magit.html][magit]] (from inside emacs) but I still use the [[http://en.wikipedia.org/wiki/Command-line_interface][CLI]] from time to time.
Here I will present my [[http://en.wikipedia.org/wiki/Command-line_interface][CLI]] use.
I'll keep [[http://philjackson.github.com/magit/magit.html][magit]] for another time.

* gbr
=git branch=

To see the list of branches you have on your current repository.

#+BEGIN_SRC sh
tony@dagobah(0.46,) 15:48:41 ~/repo/perso/dot-files (master) $ gbr
 * master
#+END_SRC
Here, I only have locally the master branch.

=gbr -r= or =gbr --remote= to see the remote branches:
#+BEGIN_SRC sh
tony@dagobah(0.36,) 16:41:11 ~/repo/perso/dot-files (master) $ gbr --remote
  origin/HEAD -> origin/master
  origin/master
  origin/test
#+END_SRC
Remotely I see other branches, here *master* and *test*.

* gdf
=git diff=

To see the modifications you developed between your workspace and the commited files.

Example:
#+BEGIN_SRC sh
tony@dagobah(0.51,) 13:04:30 ~/repo/perso/testproject (twitter-post2) $ gdf
diff --git a/README.md b/README.md
index 7f97a63..54ce989 100644
--- a/README.md
+++ b/README.md
@@ -21,3 +21,4 @@ lein run
 Copyright (C) 2011 djhworld

 Distributed under the Eclipse Public License, the same as Clojure.
+This is a line added to the end of the README
#+END_SRC

_Explanation:_
Here we can see that the file /README.md/ has one more line *This is a line added to the end of the README*.

* gst
=git status=

This will list the current status of your index (modification, untracked files):

Example:
#+BEGIN_SRC sh
tony@dagobah(0.20,) 17:07:59 ~/repo/perso/dot-files (master) $ gst
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   README.md
#
no changes added to commit (use "git add" and/or "git commit -a")
#+END_SRC

_Explanation:_
You can see that:
- the file /README.md/ has been changed.
- this has not been staged for commit, that is, I did not added it to the index yet

* git add
Add modifications into the git index.

If I add the /README.md/ file to the index and then check the status:
#+BEGIN_SRC sh
tony@dagobah(0.20,) 17:08:00 ~/repo/perso/dot-files (master) $ git add README.md
tony@dagobah(0.19,) 17:08:03 ~/repo/perso/dot-files (master) $ gst
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   README.md
#
#+END_SRC
_Explanation:_
The index status changed from *Changes not staged for commit* to *Changes to be committed*.
This time I added the /README.md/ to the index.
Now we are ready to commit.

* gci
=git commit -v=

Commit the content of the index.

By typing =gci= in the CLI, the git *core.editor* loads itself and ask you for a commit message:
#+BEGIN_SRC sh
------> Here you type the commit message <------
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   README.md
#
diff --git a/README.md b/README.md
index 0358d27..35e6c13 100644
--- a/README.md
+++ b/README.md
@@ -12,3 +12,4 @@ Something along those lines should do the trick:
 REPO=/path/to/your/clones/dot-files
 for i in $(ls $REPO); do ln -s $REPO/$i ~; done
 ```
+this is a test
#+END_SRC
*Note*:
At the same time, we see the modifications between the index and the already gitted file.

_Explanation:_
I you type a commit message, for example *Temporary commit* then save the modifications and close the editor.
The content of the index is *commited* (message included).

#+BEGIN_SRC sh
tony@dagobah(0.19,) 17:08:04 ~/repo/perso/dot-files (master) $ gci
[master 05dfb35] Temporary commit
 1 file changed, 1 insertion(+)
tony@dagobah(0.30,) 17:08:16 ~/repo/perso/dot-files (master) $ gst
#+END_SRC

* =gci --amend=
Reedit the content of the last commit, either:
- the commit message
- or the files that are contained in the commit.

=gci --amend= will reopen the editor but this time with your last commit message already typed:
#+BEGIN_SRC sh
Temporary commit.

# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch master
# Your branch is ahead of 'origin/master' by 1 commit.
#
# Changes to be committed:
#   (use "git reset HEAD^1 <file>..." to unstage)
#
#       modified:   README.md
#
diff --git a/README.md b/README.md
index 0358d27..35e6c13 100644
--- a/README.md
+++ b/README.md
@@ -12,3 +12,4 @@ Something along those lines should do the trick:
 REPO=/path/to/your/clones/dot-files
 for i in $(ls $REPO); do ln -s $REPO/$i ~; done
 ```
+this is a test
#+END_SRC

Then edit for example this commit message to *This is a temporary commit to demonstrate the power of git*.
Then save and close the editor.

#+BEGIN_SRC sh
tony@dagobah(0.19,) 17:19:45 ~/repo/perso/dot-files (master) $ gci --amend
[master 2c40a11] This is a temporary commit to demonstrate the power of git.
 1 file changed, 1 insertion(+)
#+END_SRC

* git ls-files -d | xargs git rm
When you deleted lots of files, you can rapidly delete them with this command.

*Note* An alias could be cool here :D

* git mv
Move one file from one destination to another.
It's the same as the *mv* command, but has the advantage to add the move action to the git index too.

* git reset
** soft
To unstage modifications from the index.
This also let the workspace intact, that is with your modifications.

(*--soft* is optional)
#+BEGIN_SRC sh
git reset HEAD~
#+END_SRC

This will remove the last commit but keep the contents of the last commit that is then seen as modifications to be staged.
You can then recommit with less files and also rewrite the commit message.

** hard
To delete local modifications from the index.

#+BEGIN_SRC sh
git reset --hard HEAD~
#+END_SRC
_Explanation:_
This will ultimately remove the last commit and the contents of the last commit.

* =git rebase=

When the remote branch has diverged with your local branch and you don't want to use merge.
You can use rebase instead.

This has the advantage of replaying all your commits from your current branch one at a time.
Thus, if you have conflicts, you can solve them one at a time!

It's kind of cool to be able to focus only on one conflict.

* =git rebase -i=
Also named interactive rebase. This is another awesome git functionality.
This command permits you to rewrite your commits.

Once you are done developing the functionality you were aiming to do.
You can [[http://gitready.com/advanced/2009/02/10/squashing-commits-with-rebase.html][squash your commits together]], remove some (if rendered useless), reedit the commit messages (to more appropriate ones), etc...
At the end of it, your history is rewritten and is more straight-forward for others to see.

*Note*
Beware, that with rewriting history has limits.
Typically, do not rewrite your history if the branch is remote and used by others.

* =git blame=
Just use to see by whom the modifications have been done.
Thus engaging in a discussion to help understand the code they have done.

In my *dot-files* repository, if I =git blame .stumpwmrc=, I have the following starting output:

#+BEGIN_SRC sh
894dc3ac (Denis                   2011-06-19 23:43:16 +0200   1) ;; Hey, Emacs! This is a -*- lisp -*- file!
894dc3ac (Denis                   2011-06-19 23:43:16 +0200   2)
1d5aaa86 (Denis Labaye            2011-07-01 10:59:05 +0200   3) (setf *frame-number-map* "abcdefghijklmnopqrst")
894dc3ac (Denis                   2011-06-19 23:43:16 +0200   4)
1d5aaa86 (Denis Labaye            2011-07-01 10:59:05 +0200   5) (setf *window-format* "%m%n%s nm=%50t cl=%c id=%i")
894dc3ac (Denis                   2011-06-19 23:43:16 +0200   6)
e084e02b (Antoine Romain Dumont   2011-07-31 20:17:51 +0200   7) ;;(run-commands "restore-from-file ~/.stumpwm.screendump")
894dc3ac (Denis                   2011-06-19 23:43:16 +0200   8)
3be82213 (Antoine R. Dumont       2012-08-12 14:44:30 +0200   9) (defcommand terminal () ()
2b4ea20d (Antoine Romain Dumont   2011-07-31 18:10:24 +0200  10)   "run an xterm instance or switch to it, if it is already running."
3be82213 (Antoine R. Dumont       2012-08-12 14:44:30 +0200  11)   (run-or-raise "gnome-terminal --title=xterm1 --hide-menubar" '(:class "Gnome-terminal")))
3be82213 (Antoine R. Dumont       2012-08-12 14:44:30 +0200  12) (define-key *root-map* (kbd "x") "terminal")
e9912dae (Antoine Romain Dumont   2011-07-16 17:36:10 +0200  13)
e5a5ce33 (Antoine R. Dumont       2012-12-18 04:18:50 +0100  14) (defcommand ssh-add-identities () ()
e5a5ce33 (Antoine R. Dumont       2012-12-18 04:18:50 +0100  15)   "Add the identities present in ~/.ssh-agent-identities script."
58299192 (Antoine R. Dumont       2012-08-12 19:22:08 +0200  16)   (run-shell-command "~/bin/ssh/ssh-add.sh"))

#+END_SRC

Then we can see that for each line which developer touched it lastly.
As an example, I can ask Denis what the =(setf *frame-number-map* "abcdefghijklmnopqrst")= is all about :D.
* gco
Just to move myself to the branch I want or creating a new one:
** Move
#+BEGIN_SRC sh
gco branch-i-want
#+END_SRC

** Create
#+BEGIN_SRC sh
gco -b new-branch
#+END_SRC
