#+BLOG: tony-blog
#+TITLE: Dayly git
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: emacs, git, aliases
#+CATEGORY: emacs, git
#+DESCRIPTION: How do i use git every day
#+STARTUP: indent
#+STARTUP: hidestars

Here are the [[http://git-scm.com/][git]] aliases/commands I use in my everyday life:

* aliases/git aliases
There exists two kinds of aliases, the ones for the system and the ones for git.
In the suite, i will describe in the title the system one first separated with / then the git one.
** git
=hub=
I recently came across [[https://github.com/defunkt/hub][hub]] that is a command to help in [[http://defunkt.io/hub/][gitting with github]].
This adds the funtionalities to fork, pull request, browse issues, etc...

This *seems* to be a powerful interface to permit to play with github via the CLI.
I do not yet play enough with it so i don't enter into details here.

Suffice it to say that you can alias it as git as this delegate to git underneath.

** gitka
=gitk --all=
I often want to see all the branches.
If not, i use directly =gitk=

*Note*
There is a CLI interface to see beautiful branches called [[https://git.wiki.kernel.org/index.php/Tig][tig]].

Possible output:
#+BEGIN_SRC sh
2012-12-25 11:55                    o Unstaged changes
2012-11-22 19:58 Antoine R. Dumont  o [master] [origin/master] Remove useless import.
2012-11-22 19:53 Antoine R. Dumont  o Play with the trello api.
2012-11-12 12:35 Antoine R. Dumont  M─┐ [upstream/master] Merged in denlab/cljsta (pull request #41)
2012-11-02 18:27 Antoine R. Dumont  M─┐ Merged in denlab/cljsta/movie-query (pull request #40)
2012-11-02 15:46 Denis Labaye       │ │ o EC2: some refactoring (->)
2012-11-02 12:27 Denis Labaye       │ │ o DONE EC2: List all instances of all regions
2012-11-01 19:58 Denis Labaye       │ o │ imdbapi: a ns to query movies
2012-11-01 17:28 Denis Labaye       │ │ o DONE implements the fake ls (with the local data on disk)
2012-11-01 17:12 Denis Labaye       │ │ o DONE regions
2012-11-01 14:56 Denis Labaye       │ │ o cleanup
2012-10-31 19:14 Antoine R. Dumont  I─┐ │ Merged in denlab/cljsta (pull request #39)
2012-10-31 09:53 Denis Labaye       │ o─┘ DONE put body in <> properly
2012-10-31 09:34 Denis Labaye       │ o DONE handle the throw exception case
2012-10-31 09:20 Denis Labaye       │ o DONE put body in <>
2012-10-30 20:15 Antoine R. Dumont  I─┐ Merged in denlab/cljsta (pull request #38)
2012-10-30 15:46 Denis Labaye       │ o DONE package compression
2012-10-30 15:07 Denis Labaye       │ o DONE make times in title optional
2012-10-30 11:45 Denis Labaye       │ o DONE add options capabilities to the org-rendering
2012-10-30 11:22 Denis Labaye       │ o DONE remove the brackets in [%]
2012-10-30 11:17 Denis Labaye       │ o doc: cleanup todo
2012-10-30 12:06 Antoine R. Dumont  I─┐ Merged in denlab/cljsta (pull request #37)
2012-10-30 10:10 lazyposse          M─┐ Merged in ardumont/cljsta/treemap (pull request #36)
2012-10-30 10:06 Denis Labaye       │ │ o DONE Acquiring WCI data
2012-10-29 21:48 Antoine R. Dumont  │ o │ [origin/treemap] Just a little update on the actual status.
2012-10-29 21:34 Antoine R. Dumont  │ o │ *** DONE generate the pivot for the jtreemap applet
2012-10-29 20:37 Antoine R. Dumont  │ o │ *** DONE tryout one sample
2012-10-29 19:57 Antoine R. Dumont  │ o │ *** DONE add the jtreemap dependency
2012-10-29 19:56 Antoine R. Dumont  │ o │ *** DONE Rename the previous treemap namespace (that was not a real treemap) into a more appropriate namespace.
2012-10-29 16:46 Antoine R. Dumont  I─┐ │ Merged in denlab/cljsta (pull request #35)
2012-10-29 01:48 Denis Labaye       │ o─┘ data: added files from WCI captures

#+END_SRC
** gst/git st
=git status=

** gci/git ci
=git commit=

** gco/git co
=git checkout=

Move to another branch named *another-branch*:
#+BEGIN_SRC sh
gco another-branch
git co another-branch
#+END_SRC

Create a new branch named *a-new-branch*
#+BEGIN_SRC sh
gco -b a-new-branch
git co -b a-new-branch
#+END_SRC

** gbr/git br
=git branch=
** gdf
=git diff=
** gf
=git fetch=
** gfa
=git fetch --all=
I always work with forks.
So when I work in team project, I have at least 2 remotes:
- origin: this is my fork
- upstream: this is the main fork

When i want to retrieve the remote commits, i systematically want those of my fork and then those from the main fork to sync the forks.
It's all a story about forks! :D

** git unstage
=git reset HEAD --=

I came across it and thought this was a good idea so i installed it.
But I did not use it yet.

I still use directly =git reset=.

** git last
=git log -1 HEAD=
To see the last commit. This is mainly to check if I am where I think I am.

** Deploy script
*** system git aliases
My =~/.bashrc= orchestrates the sourcing of my aliases:
=~/.bashrc=
#+BEGIN_SRC sh
...
[ -f ~/.bash_aliases ] && . ~/.bash_aliases
...
#+END_SRC
[[https://github.com/ardumont/dot-files/blob/master/.bashrc][.bashrc]]

Then my aliases are loaded:
#+BEGIN_SRC sh
alias git='hub'
alias gitka='gitk --all'
alias gst='git status'
alias gci='git commit -v'
alias gco='git checkout'
alias gbr='git branch'
alias gdf='git diff'
alias gl='git log --oneline --graph --remotes --decorate --all'
alias gf='git fetch'
alias gfa='git fetch --all'
#+END_SRC
[[https://github.com/ardumont/dot-files/blob/master/.bash_aliases][.bash_aliases]]
#+END_SRC
*** git config
To run once:
#+BEGIN_SRC sh
#!/bin/bash -e

git config --global user.name "$YOUR_NAME"
git config --global user.email "$YOUR_EMAIL"

# emacs
git config --global core.editor "$YOUR_EDITOR"

# color everywhere (one flag)
git config --global color.ui true
# or in separate
#git config --global color.branch auto
#git config --global color.diff auto
#git config --global color.interactive auto
#git config --global color.status auto

# tool to help the merging
git config --global merge.tool meld

# aliases
git config --global alias.co checkout
git config --global alias.br branch
git config --global alias.ci commit
git config --global alias.st status

# unstage a file
git config --global alias.unstage 'reset HEAD --'

# see the last log
git config --global alias.last 'log -1 HEAD'
#+END_SRC
[[https://github.com/ardumont/sh/blob/master/deploy/deploy-git-config.sh][deploy-git-config.sh]]

*Notes*
1) Don't forget to change the variable to your convenience:
- =$YOUR_NAME= with your name
- =$YOUR_EMAIL= with your email
- =$YOUR_EDITOR= with your editor

2) If you want meld, you have to install it too
#+BEGIN_SRC sh
sudo aptitude install -y meld
#+END_SRC

* commands

I have 2 main ways of using git:
- [[http://philjackson.github.com/magit/magit.html][magit]] through [[http://www.gnu.org/s/emacs/][emacs]]
- [[http://en.wikipedia.org/wiki/Command-line_interface][CLI]]
** magit

** CLI
*** gdf
=git diff=
To see the modification between your workspace and the commited stuff.

Example:
#+BEGIN_SRC sh
tony@dagobah(0.51,) 13:04:30 ~/repo/perso/testproject (twitter-post2) $ gdf
diff --git a/README.md b/README.md
index 7f97a63..54ce989 100644
--- a/README.md
+++ b/README.md
@@ -21,3 +21,4 @@ lein run
 Copyright (C) 2011 djhworld

 Distributed under the Eclipse Public License, the same as Clojure.
+This is a line added to the end of the README
#+END_SRC

_Explanation:_
Here we can see that the file /README.md/ has one more line *This is a line added to the end of the README*.
*** gst
=git status=

This will list the current status of your index (modification, untracked files)

Example:
#+BEGIN_SRC sh
tony@dagobah(0.17,) 13:06:11 ~/repo/perso/testproject (twitter-post2) $ gst
# On branch twitter-post2
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   README.md
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       resources/public/js/cljs.js
#       target/
no changes added to commit (use "git add" and/or "git commit -a")
#+END_SRC

_Explanation:_
You can see that:
- the file /README.md/ has been changed.
- there are untracked files:
  - one untracked file
  - one folder *target*.

*** git add
Add modifications into the git index.

Example:
#+BEGIN_SRC sh
tony@dagobah(0.20,) 13:10:23 ~/repo/perso/testproject (twitter-post2) $ git add README.md
tony@dagobah(0.27,) 13:10:26 ~/repo/perso/testproject (twitter-post2) $ gst
# On branch twitter-post2
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   README.md
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       resources/public/js/cljs.js
#       target/
#+END_SRC

_Explanation:_
You add the /README.md/ file in the index.
Then if you look at your index status, you can see that the index status changed from *Changes not staged for commit* to *Changes to be committed*.
Inside you can see the /README.md/.
Nothing changed regarding the 2 other files.

*** gci
=git commit -v=
Commit the content of the index.

By typing =gci= in the CLI, the *core.editor* loads itself and here is the main view resulting:
#+BEGIN_SRC sh
------> Here you type the commit message <------
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch twitter-post2
# Changes to be committed:
#   (use "git reset HEAD <file>..." to unstage)
#
#       modified:   README.md
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#       resources/public/js/cljs.js
#       target/
diff --git a/README.md b/README.md
index 7f97a63..54ce989 100644
--- a/README.md
+++ b/README.md
@@ -21,3 +21,4 @@ lein run
 Copyright (C) 2011 djhworld

 Distributed under the Eclipse Public License, the same as Clojure.
+This is a line added to the end of the README

#+END_SRC
*Note*:
At the same time, we see the modification between the index and the already commited stuff.

*** git ls-files -d | xargs git rm
*** git mv
*** git reset
*** git rebase
*** git rebase -i
*** git blame
*** gco
