#+Title: How to setup gwt-restlet on wikeo-web
#+author: Antoine Romain Dumont
#+STARTUP: indent
#+STARTUP: hidestars odd

* What we must do
*** Add the dependencies in maven
#+BEGIN_SRC xml
		<!-- ================ Dependencies : GWT ========================= -->
 		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet</artifactId>
			<version>${restlet.version}</version>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.servlet</artifactId>
			<version>${restlet.version}</version>
		</dependency>
		<dependency>
			<groupId>org.restlet.jee</groupId>
			<artifactId>org.restlet.ext.net</artifactId>
			<version>${restlet.version}</version>
		</dependency>
		<dependency>
			<groupId>org.restlet.gwt</groupId>
			<artifactId>org.restlet</artifactId>
			<version>${restlet.version}</version>
		</dependency>
#+END_SRC
*** Add a proxy in the server part.
It will be in charge of redirecting every resource asked to the
resource server.
#+BEGIN_SRC sh
public class Main extends Application {

	@Override
	public synchronized Restlet createInboundRoot() {
		Redirector redirector = new Redirector(getContext(),
				"http://localhost:8080/wikeo-resource{rr}");
		return redirector;
	}
}
#+END_SRC

*** Add this entry in the /wikeo-web/src/main/webapp/WEB-INF/web.xml
#+BEGIN_SRC xml
	<servlet>
		<servlet-name>adapter</servlet-name>
		<servlet-class>org.restlet.ext.servlet.ServerServlet</servlet-class>
		<init-param>
			<param-name>org.restlet.application</param-name>
			<param-value>com.adeo.wikeo.adeoweb.server.Main</param-value>
		</init-param>
		<init-param>
			<param-name>org.restlet.clients</param-name>
			<param-value>HTTP</param-value>
		</init-param>
	</servlet>
	<servlet-mapping>
		<servlet-name>adapter</servlet-name>
		<url-pattern>/wikeo-resource/*</url-pattern>
	</servlet-mapping>
#+END_SRC
*** Create interface proxies
We must create proxies to our interfaces declared in
wikeo-resources-api to declare the method the same way as gwt does.

Here is the original in the api:
#+BEGIN_SRC java
package com.adeo.wikeo.resource;

import org.restlet.resource.Get;

import com.adeo.wikeo.representation.AttributeRepresentation;

/**
 * @author : dawidlo Date: 8/10/11
 */
public interface AttributeResource {

	public static final String ATTRIBUTE_RESOURCE_PATH = "/v1/core/dictionary/attributes/";

	/**
	 * Finds an attribute by it's id.
	 * 
	 * @return An AttributeRepresentation or null.
	 */
	@Get
	AttributeRepresentation findAttributeById();
}
#+END_SRC

And here is the proxy one declared inside the wikeo-web part
#+BEGIN_SRC java
package com.adeo.wikeo.resource;

import org.restlet.client.resource.ClientProxy;
import org.restlet.client.resource.Get;
import org.restlet.client.resource.Result;

import com.adeo.wikeo.representation.AttributeRepresentation;

public interface AttributeResourceProxy extends ClientProxy {

	/**
	 * Finds an attribute by it's id.
	 * 
	 * @return An AttributeRepresentation or null.
	 */
	@Get
	void findAttributeById(Result<AttributeRepresentation> result);
}
#+END_SRC

The subtility is in the Result<AttributeRepresentation> instead of
void in the previous example.

Beware:
*** No annotations specifying the language or communication. 
We must let the client and the server choose the one they want to
communicate with (here gwt-json).
*** The annotations come from different package
In wikeo-web, org.restlet.client.resource.(Post|Get|...)
In wikeo-resources-api, org.restlet.resource.(Post|Get|...)

*** Use the connector

* What looks like the call of the asynchronous method
*** Immediate difference
***** Gwt
Before gwt-restlet, we created an AsyncCallback with the actions to
take in success or error, the rpc call via 2 interfaces, and the
server code to serve the rpc call (wrapper of the resource call).

Synchroneous interface:
#+BEGIN_SRC java
@RemoteServiceRelativePath("Service")
public interface Service extends RemoteService {
	...
	AttributeRepresentation searchAttributeById(String attributeId) throws UIException;	
}
#+END_SRC

Asynchroneous one generated by your ide
#+BEGIN_SRC java
public interface ServiceAsync {
	void searchAttributeById(String attributeId, AsyncCallback<AttributeRepresentation> callback);
}
#+END_SRC

Activity part that call the rpc:
#+BEGIN_SRC java
		AsyncCallback<AttributeRepresentation> callback = createCallbackSearchAttribute();
		service.searchAttributeById(attributeId, callback);
#+END_SRC

Asyncallback part with the actions to take in success or error:
#+BEGIN_SRC java
	/**
	 * Create a callback.
	 * 
	 * @return AsyncCallback<AttributeRepresentation>
	 */
	@VisibleForTesting
	AsyncCallback<AttributeRepresentation> createCallbackSearchAttribute() {
		return new AsyncCallback<AttributeRepresentation>() {
			@Override
			public void onSuccess(AttributeRepresentation attributeRepresentation) {
				dealWithSuccess(attributeRepresentation);
			}

			@Override
			public void onFailure(Throwable caught) {
				dealWithError(caught);
			}
		};
	}
#+END_SRC
***** Gwt-restlet
Now the difference is we call directly the resource (we need to create
a proxy interface and call this proxy interface):
#+BEGIN_SRC java
		Result<AttributeRepresentation> callback = createCallbackSearchAttribute();
		attributeResourceProxy.getClientResource().setReference(SetupUrl.URL_ATTRIBUTE_WIKEO + attributeId);
		attributeResourceProxy.findAttributeById(callback);
#+END_SRC

We do not need interfaces and the server code.
We just need to create the callback
#+BEGIN_SRC java
	/**
	 * Create a callback.
	 * 
	 * @return Result<AttributeRepresentation>
	 */
	@VisibleForTesting
	Result<AttributeRepresentation> createCallbackSearchAttribute() {
		return new Result<AttributeRepresentation>() {
			@Override
			public void onSuccess(AttributeRepresentation attributeRepresentation) {
				dealWithSuccess(attributeRepresentation);
			}

			@Override
			public void onFailure(Throwable caught) {
				dealWithError(caught);
			}
		};
	}
#+END_SRC

#+END_SRC

*** Long sample, activity part
Before with rpc call in gwt
#+BEGIN_SRC java
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.adeo.wikeo.adeoweb.client.ui.VisualizeAttributeView.Presenter#searchAttributeById
	 * (java.lang.String)
	 */
	@Override
	public void searchAttributeById(String attributeId) {
		AsyncCallback<AttributeRepresentation> callback = createCallbackSearchAttribute();
		service.searchAttributeById(attributeId, callback);
		getView().enableSearch(false);
	}

	/**
	 * Create a callback.
	 * 
	 * @return AsyncCallback<AttributeRepresentation>
	 */
	@VisibleForTesting
	AsyncCallback<AttributeRepresentation> createCallbackSearchAttribute() {
		return new AsyncCallback<AttributeRepresentation>() {
			@Override
			public void onSuccess(AttributeRepresentation attributeRepresentation) {
				dealWithSuccess(attributeRepresentation);
			}

			@Override
			public void onFailure(Throwable caught) {
				dealWithError(caught);
			}
		};
	}
#+END_SRC
Now with gwt-restlet
#+BEGIN_SRC java
	/*
	 * (non-Javadoc)
	 * 
	 * @see
	 * com.adeo.wikeo.adeoweb.client.ui.VisualizeAttributeView.Presenter#searchAttributeById
	 * (java.lang.String)
	 */
	@Override
	public void searchAttributeById(String attributeId) {
		Result<AttributeRepresentation> callback = createCallbackSearchAttribute();
		attributeResourceProxy.getClientResource().setReference(SetupUrl.URL_ATTRIBUTE_WIKEO + attributeId);
		attributeResourceProxy.findAttributeById(callback);
		getView().enableSearch(false);
	}

	/**
	 * Create a callback.
	 * 
	 * @return Result<AttributeRepresentation>
	 */
	@VisibleForTesting
	Result<AttributeRepresentation> createCallbackSearchAttribute() {
		return new Result<AttributeRepresentation>() {
			@Override
			public void onSuccess(AttributeRepresentation attributeRepresentation) {
				dealWithSuccess(attributeRepresentation);
			}

			@Override
			public void onFailure(Throwable caught) {
				dealWithError(caught);
			}
		};
	}
#+END_SRC

