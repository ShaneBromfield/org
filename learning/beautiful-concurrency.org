#+title: Beautiful concurrency - notes
#+author: ardumont

- [[https://www.fpcomplete.com/user/simonpj/beautiful-concurrency][Beautiful concurrency]]
- [[http://research.microsoft.com/en-us/um/people/simonpj/Papers/STM/stm.pdf][Composable Memory Transactions]]
- [[http://www.eecs.berkeley.edu/Pubs/TechRpts/2006/EECS-2006-1.pdf][The problems with threads]]
- [[http://www.stanford.edu/~ouster/cgi-bin/papers/threads.pdf][Why threads are a bad idea (for most purposes)]]
- [[http://research.microsoft.com/en-us/um/people/simonpj/papers/marktoberdorf/mark.pdf][Tackling the awkward squad: monadic input/output, concurrency, exceptions, and foreign language calls in Haskell]]

* STM
New approach on programming shared memory parallel processors

* Parallelism / Concurrency

** Parallelism

- employs multiple processors to make programs run faster
- performance is the main goal
- ideally idempotency
- semantics of the programs is unchanged compared to a sequential program (ideally)
- has to do with implementation

In haskell:
#+begin_src haskell
Control.Parallel.par :: a -> b -> b
#+end_src

** Concurrency

- describes a situation where non-deterministic behaviour, and many things are going on at once, is part of the specification of the programs.
- must happen even on a uni-processor
- using forkIO to fork an explicit thread is a signal that a program uses concurrency

Ex:
- web server with one-thread per client
- telephone switch

#+begin_src haskell
Control.Concurrent.forkIO :: IO () -> IO GHC.Conc.Sync.ThreadId
#+end_src
* Locks are bad

Too many situations can let hell break loose.

|-------------------------------------+--------------------------------------------------------------------------------------------|
| Cons                                |                                                                                            |
|-------------------------------------+--------------------------------------------------------------------------------------------|
| Take too few locks                  | Multiple threads will modify the variable at the same time -> corrupted data               |
| Take too many locks                 | Inhibit concurrency or deadlock                                                            |
| Take the wrong lock                 | If the program is not clear enough, we cannot determine which lock is used for which data. |
|                                     | Increase the probability to take the wrong lock -> corrupted data                          |
| Error Recovery                      | Hard. How to ensure there is no inconsistency when problem arise                           |
| Lost wake-ups and erroneous retries |                                                                                            |
| Break modularity                    | Basic means of combining from smaller programs is no longer possible                       |
|                                     |                                                                                            |
|-------------------------------------+--------------------------------------------------------------------------------------------|
* Definition
|-------------+--------------------------------------------|
| Term        | Definition                                 |
|-------------+--------------------------------------------|
| Side effect | Anything that reads or write mutable state |
|             |                                            |
|-------------+--------------------------------------------|
* Transaction in haskell
** atomically

#+begin_src haskell
atomically ( action )
#+end_src
where action is a unit block.

`atomically` makes 2 guarantees:

- Atomicity: The effects of `atomically action` become visible to another thread all at once.

- Isolation: During a call of `atomically action`, the action `action` is completely unaffected by other threads.
             It acts as if atomically takes a snapshot of the world and the `action` executes against the snapshot.

Its type:
#+begin_src haskell
atomically :: STM a -> IO a
#+end_src

** STM

An STM action is like an IO action with much more limited possible side effect.
The main possible action is read/write a transaction variable (TVar).

No IO action is possible within a STM action.
This way, we can `retry` a transaction.

#+begin_src haskell
newTVar :: a -> STM (TVar a)
readTVar :: TVar a -> STM a
writeTVar :: TVar a -> a -> STM ()
#+end_src

- Optimistic execution transation:
  - Transaction log thread in charge of the transaction log initially empty
  - Instead of doing action immediately
  - Each call `writeTVar` writes the reference of the TVar and the new value inside the transaction log
  - Each call `readTVar` reads the transaction log to find out if other threads have written inside the TVar
  - If no write is found, the value of the TVar is directly read from it.
  - The `readTVar` call is written in the transaction log too
  - When the action is finished, there is a transaction log validation step
  - Ensure that the value in the transaction log match with the current value of the TVar
  - If values match, then validation succeeds.
      The commit steps takes all the writes recorded in the log and writes them into the real TVars (atomically).
  - Otherwise, the validation fails as the transaction has an inconsistent view of the world.
      The transaction is aborted.
      The transaction log is reinitialized.
      The action is run all over again (no commit have taken place so it can).

*** Examples

**** Account Transfer

#+begin_src haskell
module Account where

import Control.Concurrent.STM

-- Represent the balance of the account
type Account = TVar Int

-- transfer `amount` from account `from` to account `to`
transfer :: Account -> Account -> Int -> IO ()
transfer from to amount =
  atomically (
    do deposit to amount
       withdraw from amount
  )

deposit :: Account -> Int -> STM ()
deposit acc amt =
  do balance <- readTVar acc
     writeTVar acc (balance + amt)

withdraw :: Account -> Int -> STM ()
withdraw acc amt = deposit acc (- amt)

showAccount :: Account -> IO String
showAccount acc = do bal <- (atomically . readTVar) acc
                     return $ show bal

displayAccount :: String -> Account -> IO ()
displayAccount label acc =
  do bal <- showAccount acc
     putStrLn $ label ++ ": " ++ bal

transferFromAccountAToAccountB :: IO ()
transferFromAccountAToAccountB =
  do accA <- accountA
     accB <- accountB
     displayAccount "A" accA
     displayAccount "B" accB
     transfer accA accB 10
     putStrLn "Transfer 10 from A to B: "
     displayAccount "A" accA
     displayAccount "B" accB
    where accountA :: IO Account
          accountA = atomically . newTVar $ (100 :: Int)
          accountB :: IO Account
          accountB = atomically . newTVar $ (300 :: Int)

-- *Account> transferFromAccountAToAccountB
-- A: 100
-- B: 300
-- Transfer 10 from A to B:
-- A: 90
-- B: 310

#+end_src

**** Account transfer with blocking
#+begin_src haskell

-- need: import Control.Concurrent

limitedWithdraw :: Account -> Int -> STM ()
limitedWithdraw acc amt =
  do balance <- readTVar acc
     check (0 <= amt && amt <= balance)
     writeTVar acc (balance - amt)

-- Beware signature is different from deposit one
delayDeposit :: Account -> Int -> IO ()
delayDeposit acc amt =
  do threadDelay 3000000            -- wait 3 seconds
     atomically ( deposit acc amt )

withdrawFromAccountAWithRetry :: IO ()
withdrawFromAccountAWithRetry =
  do accA <- accountA
     displayAccount "A" accA
     putStrLn "Transfer 11 from A (waiting if not enough money)..."
     forkIO(delayDeposit accA 1)
     atomically ( limitedWithdraw accA 11 )
     displayAccount "A" accA
    where accountA :: IO Account
          accountA = atomically . newTVar $ (10 :: Int)

-- *Account> withdrawFromAccountAWithRetry
-- A: 10
-- Transfer 11 from A (waiting if not enough money)...
-- A: 0
#+end_src
