#+title: udev
#+author: ardumont

udev to deal with events

http://reactivated.net/writing_udev_rules.html
https://wiki.archlinux.org/index.php/Udev#Execute_on_VGA_cable_plug_in

* monitor plug/unplug event

** Listen
#+begin_src sh
udevadm monitor --environment
#+end_src

Plug your vga/hdmi monitor in your computer and admire the results:

Output:
#+begin_src sh
# tony at corellia in ~ [14:58:22]
$ udevadm monitor --environment
monitor will print the received events for:
UDEV - the event which udev sends out after rule processing
KERNEL - the kernel uevent

KERNEL[463376.233892] change   /devices/pci0000:00/0000:00:02.0/drm/card0 (drm)
ACTION=change
DEVNAME=/dev/dri/card0
DEVPATH=/devices/pci0000:00/0000:00:02.0/drm/card0
DEVTYPE=drm_minor
HOTPLUG=1
MAJOR=226
MINOR=0
SEQNUM=6812
SUBSYSTEM=drm

UDEV  [463376.323702] change   /devices/pci0000:00/0000:00:02.0/drm/card0 (drm)
ACTION=change
DEVNAME=/dev/dri/card0
DEVPATH=/devices/pci0000:00/0000:00:02.0/drm/card0
DEVTYPE=drm_minor
DISPLAY=:0
HOTPLUG=1
ID_FOR_SEAT=drm-pci-0000_00_02_0
ID_PATH=pci-0000:00:02.0
ID_PATH_TAG=pci-0000_00_02_0
MAJOR=226
MINOR=0
SEQNUM=6812
SUBSYSTEM=drm
TAGS=:seat:uaccess:
USEC_INITIALIZED=704
#+end_src

Now, what we can extract:
- device: /devices/pci0000:00/0000:00:02.0/drm/card0

Now extract some more detail which will help creating the rule:

#+begin_src sh
udevadm info -a --path=/devices/pci0000:00/0000:00:02.0/drm/card0
#+end_src

Sample output:
#+begin_src sh
Udevadm info starts with the device specified by the devpath and then
walks up the chain of parent devices. It prints for every device
found, all possible attributes in the udev rules key format.
A rule to match, can be composed by the attributes of the device
and the attributes from one single parent device.

  looking at device '/devices/pci0000:00/0000:00:02.0/drm/card0':
    KERNEL=="card0"
    SUBSYSTEM=="drm"
    DRIVER==""
    ATTR{gt_RP0_freq_mhz}=="950"
    ATTR{gt_RP1_freq_mhz}=="300"
    ATTR{gt_RPn_freq_mhz}=="300"
    ATTR{gt_act_freq_mhz}=="450"
    ATTR{gt_cur_freq_mhz}=="450"
    ATTR{gt_max_freq_mhz}=="950"
    ATTR{gt_min_freq_mhz}=="450"

  looking at parent device '/devices/pci0000:00/0000:00:02.0':
    KERNELS=="0000:00:02.0"
    SUBSYSTEMS=="pci"
    DRIVERS=="i915"
    ATTRS{boot_vga}=="1"
    ATTRS{broken_parity_status}=="0"
    ATTRS{class}=="0x030000"
    ATTRS{consistent_dma_mask_bits}=="39"
    ATTRS{d3cold_allowed}=="1"
    ATTRS{device}=="0x1616"
    ATTRS{dma_mask_bits}=="39"
    ATTRS{driver_override}=="(null)"
    ATTRS{enable}=="1"
    ATTRS{index}=="1"
    ATTRS{irq}=="52"
    ATTRS{label}=="32"
    ATTRS{local_cpulist}=="0-3"
    ATTRS{local_cpus}=="0f"
    ATTRS{msi_bus}=="1"
    ATTRS{numa_node}=="-1"
    ATTRS{subsystem_device}=="0x2216"
    ATTRS{subsystem_vendor}=="0x103c"
    ATTRS{vendor}=="0x8086"

  looking at parent device '/devices/pci0000:00':
    KERNELS=="pci0000:00"
    SUBSYSTEMS==""
    DRIVERS==""
#+end_src

Note the KERNEL and SUBSYSTEM entries which will definitely help.

** Rule

Create a file in /udev/rules.d/999-screen-layout.rules:
#+begin_src txt
KERNEL=="card0", SUBSYSTEM=="drm", ENV{DISPLAY}+=":0", RUN+="/home/tony/.layouts/corellia.sh"
#+end_src
This is the representation of an even that udev will listen to and react.
Here it will run the external script [[https://github.com/ardumont/dot-files/blob/master/.layouts/corellia.sh][/home/tony/.layouts/corellia.sh]]

My script is in charge of triggering the add/remove.
Surely, there must be a way to transfer this responsibility to udev...

You could also have a non generic rule:
#+begin_src txt
DEVPATH=="/devices/pci0000:00/0000:00:02.0/drm/card0", ENV{DISPLAY}+=":0", RUN+="/home/tony/.layouts/corellia.sh"
#+end_src

** Test

Knowing the path to test the rule would help:
#+begin_src sh
udevadm test /devices/pci0000:00/0000:00:02.0/drm/card0
#+end_src

Example output:

#+begin_src txt
# tony at corellia in ~/work/inria/repo/swh-environment/puppet-environment on git:master o [10:05:09]
$ udevadm test /devices/pci0000:00/0000:00:02.0/drm/card0
calling: test
version 227
This program is for debugging only, it does not run any program
specified by a RUN key. It may show incorrect results, because
some values may be different, or not available at a simulation run.

=== trie on-disk ===
tool version:          227
file size:         6868557 bytes
header size             80 bytes
strings            1722621 bytes
nodes              5145856 bytes
Load module index
timestamp of '/etc/systemd/network' changed
timestamp of '/lib/systemd/network' changed
Parsed configuration file /lib/systemd/network/99-default.link
Parsed configuration file /lib/systemd/network/90-mac-for-usb.link
Created link configuration context.
timestamp of '/etc/udev/rules.d' changed
timestamp of '/lib/udev/rules.d' changed
Reading rules file: /lib/udev/rules.d/39-usbmuxd.rules
...snip...
IMPORT found builtin 'usb_id --export %p', replacing /lib/udev/rules.d/55-Argyll.rules:110
Reading rules file: /lib/udev/rules.d/55-dm.rules
...snip...
Reading rules file: /lib/udev/rules.d/97-hid2hci.rules
Reading rules file: /etc/udev/rules.d/999-screen-layout.rules
Reading rules file: /lib/udev/rules.d/99-systemd.rules
rules contain 393216 bytes tokens (32768 * 12 bytes), 32092 bytes strings
22463 strings (187852 bytes), 19217 de-duplicated (159007 bytes), 3247 trie nodes used
GROUP 44 /lib/udev/rules.d/50-udev-default.rules:35
IMPORT builtin 'path_id' /lib/udev/rules.d/60-drm.rules:3
RUN 'uaccess' /lib/udev/rules.d/73-seat-late.rules:15
RUN '/home/tony/.layouts/corellia.sh' /etc/udev/rules.d/999-screen-layout.rules:1
handling device node '/dev/dri/card0', devnum=c226:0, mode=0660, uid=0, gid=44
preserve permissions /dev/dri/card0, 020660, uid=0, gid=44
preserve already existing symlink '/dev/char/226:0' to '../dri/card0'
ACTION=add
DEVNAME=/dev/dri/card0
DEVPATH=/devices/pci0000:00/0000:00:02.0/drm/card0
DEVTYPE=drm_minor
DISPLAY=:0
ID_FOR_SEAT=drm-pci-0000_00_02_0
ID_PATH=pci-0000:00:02.0
ID_PATH_TAG=pci-0000_00_02_0
MAJOR=226
MINOR=0
SUBSYSTEM=drm
TAGS=:uaccess:master-of-seat:seat:
USEC_INITIALIZED=6637072
run: 'uaccess'
run: '/home/tony/.layouts/corellia.sh'
Unload module index
Unloaded link configuration context.
#+end_src

* Improvments to implement

- Automatic installation (for reproducibility)
- udev knows in the event if it's a connection or not and delegate the add/remove event to the external script (this way, the script is just a dummy one)
