#+DATE: [2013-01-13 dim. 18:42]
#+BLOG: tony-blog
#+POSTID: 926
#+TITLE: gtalk in emacs using jabber mode
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+CATEGORIES: jabber, emacs, gtalk, tools, authentication
#+DESCRIPTION: Installing jabber and using it from emacs + authentication tips and tricks
#+STARTUP: indent
#+STARTUP: hidestars

[[https://twitter.com/lo_dawid][A friend of mine]] showed me that he was connected to [[http://www.emacswiki.org/emacs/JabberEl][jabber in emacs]] for gtalk.
So I gave it a try. I read [[http://saheelram.blogspot.fr/2011/05/using-emacs-jabber.html][some blog posts]] and tried it.
I clearly reuse the main parts of those and add my glue on it regarding credentials.

In this post, I will concentrate on:
- how to install [[http://www.emacswiki.org/emacs/JabberEl][jabber]] in emacs
- and not be bother by the credentials at each connection.

* Problem
I do not want to be asked for my password each time I'm connecting.

* Solution

I reuse a mechanism [[http://adumont.fr/blog/blogging-with-org-mode-and-org2blog-to-publish-on-wordpress/#emacs][I was introduced to with org2blog]].

*Note*
For those that are concerned by security, I hear you. I strongly believe in separating concerns and security is not the issue at hand so I do not focus on it at all.

So my *~/.authinfo* needs to be secured.
Many ways exists, on the top of my head, decent file rights, home encryption, etc...
Then again, that's not the subject at hand.

** install

Indeed, It's the same snippet as [[http://adumont.fr/blog/blogging-with-org-mode-and-org2blog-to-publish-on-wordpress/#install][before]], I add my new package to this list each time I need it.

#+BEGIN_SRC elisp
(require 'package)

(add-to-list 'package-archives
             '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

(when (not package-archive-contents)
  (package-refresh-contents))

(defvar my-packages '(jabber)
  "A list of packages to ensure are installed at launch.")

(dolist (p my-packages)
  (when (not (package-installed-p p))
    (package-install p)))

#+END_SRC

source: [[https://github.com/ardumont/emacs-live/blob/tony/packs/live/user-install-packages-pack/init.el][user-install-packages-pack/init.el]]

Evaluate the buffer =C-c m b=, then let emacs work.

** setup

*** /~/.authinfo/

We need the netrc library to parse the =~/.authinfo=

#+begin_src text
machine jabber login <your-email-gtalk> password <your-credentials>
#+end_src

*Note*
- The name jabber is the primary key you will reference in the code later.
- <your-email-gtalk> is the account gtalk
- <your-credentials> this can be your gtalk password or [[http://support.google.com/accounts/bin/answer.py?hl=en&answer=1070457&topic=1099588&ctx=topic][the password you generated in your google-account for emacs]] [1]

[1] This way, if your =~/.authinfo= is compromised, only emacs is.

*** parsing

Here is the parsing part:

#+begin_src elisp
(require 'netrc)

;; load the entry tony-blog in the ~/.netrc, we obtain a hash-map with the needed data
(setq cred (netrc-machine (netrc-parse "~/.authinfo") "jabber" t))
#+end_src

=cred= is mounted as a list of pairs.
#+begin_src elisp
(("machine" . "jabber") ("login" . "my-gtalk-email") ("password" . "some-password"))
#+end_src

Now, you have access only in ram to your credentials.

#+begin_src elisp
(netrc-get cred "login")
(netrc-get cred "password")
#+end_src

*Note*
Place yourself just after the =)= of the first expression (for example) and =C-x C-e= to evaluate the s-expression.

*** jabber setup

There is a subtlety here.
I used a [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Macros.html#Macros][emacs-lisp macro]] to be able to interpose the login and password inside the [[http://www.emacswiki.org/emacs/JabberEl][jabber]] setup.
Notice the backquote ` (prevent the evaluation of the list) and the comma (to let the evaluation takes place).

#+begin_src elisp
;; Jabber client configuration
(setq jabber-account-list
      `((,(netrc-get cred "login")
         (:password . ,(netrc-get cred "password"))
     (:network-server . "talk.google.com")
     (:connection-type . ssl)
     (:port . 5223))))
#+end_src

When executing, we obtain what we want, a list with our credentials embedded (this will not be written in files, only in rams).
#+begin_src elisp
(("my-gtalk-email" (:password . "some-password") (:network-server . "talk.google.com") (:connection-type . ssl) (:port . 5223)))
#+end_src

*** Optional jabber setup

This setup is to avoid the loading of avatar (takes too much place on the screen, but you can remove this line to load them by default).

#+begin_src elisp
(setq jabber-vcard-avatars-retrieve nil
      jabber-chat-buffer-show-avatar nil)
#+end_src

*** full
#+begin_src elisp
(require 'netrc)

;; load the entry tony-blog in the ~/.netrc, we obtain a hash-map with the needed data
(setq cred (netrc-machine (netrc-parse "~/.authinfo") "jabber" t))

;; Jabber client configuration
(setq jabber-account-list
      `((,(netrc-get cred "login")
         (:password . ,(netrc-get cred "password"))
     (:network-server . "talk.google.com")
     (:connection-type . ssl)
     (:port . 5223))))

(setq jabber-vcard-avatars-retrieve nil
      jabber-chat-buffer-show-avatar nil)
#+end_src

source: [[https://github.com/ardumont/emacs-live/blob/tony/packs/live/user-chat-pack/init.el][user-chat-pack/init.el]]

*** Connection

To connect: =C-c C-x C-c= (=M-x jabber-connect=)
To connect: =C-c C-x C-d= (=M-x jabber-disconnect=)
* Conclusion
You should be good to go.
Happy chat!
