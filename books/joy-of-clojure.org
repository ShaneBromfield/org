#+Title: Joy of Clojure - Michael Fogus, Chris Houser
#+author: Antoine Romain Dumont
#+STARTUP: indent
#+STARTUP: hidestars odd

* TODO Joy Of Clojure [40%]
*** DONE Part 1 Foundations [100%]
CLOSED: [2011-12-08 jeu. 19:59]
***** DONE Clojure philosophy [100%]
CLOSED: [2011-12-08 jeu. 19:59]
******* DONE The Clojure way
CLOSED: [2011-12-08 jeu. 19:58]
******* DONE Why a(nother) Lisp?
CLOSED: [2011-12-08 jeu. 19:58]
******* DONE Functional Programming
CLOSED: [2011-12-08 jeu. 19:58]
******* DONE Why Clojure isn't especially object oriented
CLOSED: [2011-12-08 jeu. 19:59]
******* DONE Summary
CLOSED: [2011-12-08 jeu. 19:59]
***** DONE Drinking from the Clojure firehose
CLOSED: [2011-12-08 jeu. 19:59]
***** DONE Dipping our toes in the pool
CLOSED: [2011-12-08 jeu. 19:59]
*** DONE Part 2 Data Types [100%]
CLOSED: [2012-01-13 ven. 00:27]
***** DONE On scalars [100%]
CLOSED: [2011-12-08 jeu. 20:00]
******* DONE 4.1 Understanding precision
CLOSED: [2011-12-08 jeu. 19:59]
******* DONE 4.2 Trying to be rational
CLOSED: [2011-12-08 jeu. 19:59]
******* DONE 4.3 When to use keywords
CLOSED: [2011-12-08 jeu. 19:59]
******* DONE 4.4 Symbolic resolutions
CLOSED: [2011-12-08 jeu. 19:59]
******* DONE 4.5 Regular expressions-The second problem
CLOSED: [2011-12-08 jeu. 20:00]
******* DONE 4.6 Summary
CLOSED: [2011-12-08 jeu. 20:00]
***** DONE Composite data types [100%]
CLOSED: [2012-01-13 ven. 00:27]
******* DONE 5.1 Persistence, sequence and complexity
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.2 Vectors: creating and using them in all their varieties
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.3 Lists: Clojure's code form data structure
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.4 How to use persistant queues
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.5 Persistant sets
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.6 Thinking in maps
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.7 Putting it all together: finding the position of items in a sequence
CLOSED: [2012-01-13 ven. 00:26]
******* DONE 5.8 Summary
CLOSED: [2012-01-13 ven. 00:26]
*** TODO Part 3 Functional Programming [70%]
***** DONE Being lazy and set in your ways
CLOSED: [2012-01-13 ven. 00:27]
***** DONE Immutability
CLOSED: [2012-01-13 ven. 00:27]
***** DONE Designing a persistent toy
CLOSED: [2012-01-13 ven. 00:27]
***** DONE Laziness
CLOSED: [2012-01-13 ven. 00:27]
***** DONE Putting it all together: a lazy quicksort
CLOSED: [2012-01-13 ven. 00:27]
***** DONE Functional programming
CLOSED: [2012-01-13 ven. 00:27]
***** DONE Functions in all their forms [100%]
CLOSED: [2012-01-13 ven. 00:27]
******* DONE 7.1.1 First-class functions
CLOSED: [2012-01-13 ven. 00:27]
******* DONE 7.1.2 Higher-order functions
CLOSED: [2012-01-13 ven. 00:27]
******* DONE 7.1.3 Pure functions
CLOSED: [2012-01-13 ven. 00:27]
******* DONE 7.1.4 Named arguments
CLOSED: [2012-01-13 ven. 00:27]
******* DONE 7.1.5 Constraining functions with pre- and postconditions
CLOSED: [2012-01-13 ven. 00:27]
***** TODO Closures
***** TODO Thinking recursively
***** TODO Putting it all together: A* pathfinding
*** TODO Part 4 Large-Scale Design [0%]
***** TODO Macros
***** TODO Combining data and code
***** TODO Java.next
***** TODO Mutation
*** TODO Part 5 Tangential Considerations [0%]
***** TODO Performance
***** TODO Clojure changes the way you think
