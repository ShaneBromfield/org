#+Title: Practical TDD and acceptance TDD for java developer
#+author: Antoine Romain Dumont
#+STARTUP: indent
#+STARTUP: hidestars odd

* DONE Copyright
CLOSED: [2011-10-29 sam. 13:45]
* DONE Preface
CLOSED: [2011-10-29 sam. 13:45]
* DONE Acknowledgments
CLOSED: [2011-10-29 sam. 13:45]
* DONE About this Book
CLOSED: [2011-10-29 sam. 13:45]
* DONE About the Cover Illustration
CLOSED: [2011-10-29 sam. 13:45]
* TODO Part 1: A TDD primer [25%]
*** DONE 1. The big picture [100%]
CLOSED: [2011-11-28 Mon 08:36]
Only ever write code to fix a failing test.
***** DONE Section 1.1. The challenge: solving the right problem right [100%]
******* DONE 1.1.1 Creating poorly written code
With the old ways, we got
- many defects that clutter the code
- this result in code difficult to maintain
- and slow to produce
******* DONE 1.1.2 Failing to meet actual needs
Cycle to production too long -> the finished product do no correspond
to what the client really needs anymore
***** DONE Section 1.2. Solution: being test-driven [100%]
TDD <=> internal quality
ATDD <=> external quality
******* DONE 1.2.1 High quality with TDD [100%]
- write small automated tests
- these small tests serves as alarm in our code.
- Design is what we do last.
- Refactoring after the tests are written
********* DONE Quality comes in many flavours
The quality is subjective (department quality, does the result is what
the client needed, user-friendly?, etc...).
With tdd, we are concentrated on the interfaces and not the
implementation.
So, we can focus on how the client of the developer's code could use it.
********* DONE Less time spent on fixing defects
- The lesser the defects, the less money is lost.
- The goal of tdd is to avoid as many defects as possible.
- The more the tests, The less time we spent in the debugger
- We can see almost immediately where the trouble is.
******* DONE 1.2.2 Meeting needs with acceptance TDD
TDD <=> contracts for objects
ATDD <=> contracts for the code as a all, oriented features.
The ATDD tools represents the bridge between programmers and
customers.
TDD and ATDD can work separately but together form a super tool to
deliver the high quality product the client needs for him to be more efficient.
******* DONE 1.2.3 What's in it for me?
- No more long debugging sessions
- Confident in the quality of the code we produce
- More time for other stuff
We will not be typing faster. It's a long-term vision.
We will spent less hours at fixing bugs later on.
***** DONE Section 1.3. Build it right [100%]
******* DONE 1.3.1 Test-code-refactor: the heartbeat [100%]
One simple rule: Only ever write code to fix a failing test
Before: Design -> Code -> Test
Now:    Test -> Code -> Refactoring (Design) Or Red - Green - Refactor
********* DONE First we write a test
By making the test first, we're starting the design by creating the
API. 
We only evaluate a design effectively and objectively if we are trying
to use it. We can then have a direct feedback.

Goal:
- easy to use api.
- Api with the strict needed thing -> do not over engineer because it
  costs if there are problems in it.
********* DONE Then we write just enough code
Just enough so that the test pass.
********* DONE And then, we refactor.
We try a better code than the first one but it must do the same as the
first one, in less ugly if it's possible.
******* DONE 1.3.2 Developing in small increments [100%]
Iterate to add new functionalities -> Worst case scenario, the product comes to production with some missing
functionality.
With the old way, the worst case scenario is that the product do not
arrive to production.
********* DONE Small enought to fit our heads
We cannot deal with too numerous concepts at the same time.
So make this number less to consider it appropriately.
********* DONE Evolutionary design
Let the need appear and try not to make everything up-front.
********* DONE Discipline required
Discipline required from the developers to be able to build on top of
stable code (tested code).
******* DONE 1.3.3 Keeping code healthy with refactoring [100%]
CLOSED: [2011-11-27 Sun 11:05]
Changing the internal code to a more clean design without changing the external behaviour.
********* DONE Refactoring is discipline
********* DONE Refactoring are transformations
********* DONE Refactoring alter internal structure
CLOSED: [2011-11-27 Sun 11:04]
********* DONE Refactorings preserves behavior
CLOSED: [2011-11-27 Sun 11:05]
******* DONE 1.3.4 Making sure the software still works [100%]
CLOSED: [2011-11-27 Sun 11:06]
********* DONE Protection with automated tests
CLOSED: [2011-11-27 Sun 11:06]
********* DONE Getting fast feedback
CLOSED: [2011-11-27 Sun 11:06]
***** DONE Section 1.4. Build the right thing: acceptance TDD [100%]
CLOSED: [2011-11-27 Sun 11:25]
******* DONE 1.4.1 What's in a name
CLOSED: [2011-11-27 Sun 11:09]
******* DONE 1.4.2 Close collaboration [100%]
CLOSED: [2011-11-27 Sun 11:14]
********* DONE Seeing concrete, working software
CLOSED: [2011-11-27 Sun 11:10]
********* DONE Building trust and confidence
CLOSED: [2011-11-27 Sun 11:11]
********* DONE Customer in control
CLOSED: [2011-11-27 Sun 11:11]
********* DONE Evolving a shared language 
CLOSED: [2011-11-27 Sun 11:14]
******* DONE 1.4.3 Tests as a shared language [100%]
CLOSED: [2011-11-27 Sun 11:25]
********* DONE Tests as specification
CLOSED: [2011-11-27 Sun 11:23]
********* DONE Specification by example 
CLOSED: [2011-11-27 Sun 11:24]
***** DONE Section 1.5. Tools for test-driven development [100%]
CLOSED: [2011-11-28 Mon 08:36]
******* DONE 1.5.1 Unit testing with xUnit
CLOSED: [2011-11-27 Sun 13:15]
******* DONE 1.5.2 Test frameworks for acceptance TDD
CLOSED: [2011-11-28 Mon 08:34]
******* DONE 1.5.3 Continous integration and builds [100%]
CLOSED: [2011-11-28 Mon 08:35]
********* DONE Practical tradeoffs
CLOSED: [2011-11-28 Mon 08:35]
********* DONE Build servers galore
CLOSED: [2011-11-28 Mon 08:35]
******* DONE 1.5.4 Code coverage [%]
CLOSED: [2011-11-28 Mon 08:36]

***** DONE Section 1.6. Summary
CLOSED: [2011-11-28 Mon 08:36]
*** TODO 2. Beginning TDD [14%]
***** DONE Section 2.1. From requirements to tests [100%]
CLOSED: [2011-11-28 Mon 08:53]
******* DONE 2.1.1 Decomposing requirements
CLOSED: [2011-11-28 Mon 08:43]
Decomposing in tasks.
Decomposing in tests is better suited.
******* DONE 2.1.2 What are good tests made of?
CLOSED: [2011-11-28 Mon 08:48]
********* A good test is atomic
********* A good test is isolated
******* DONE 2.1.3 Working from a test list
CLOSED: [2011-11-28 Mon 08:51]
We pick one test from a list
We're completely focused on this one (the other one do not exist).
******* DONE 2.1.4 Programming by intention
CLOSED: [2011-11-28 Mon 08:53]
Code the test as if the production code exist. When it breaks, fix it.
When it's green again, continue coding the test.
***** TODO Section 2.2. Choosing the first test [%]
***** TODO Section 2.3. Breadth-first, depth-first [%]
***** TODO Section 2.4. Let’s not forget to refactor [%]
***** TODO Section 2.5. Adding a bit of error handling [%]
***** TODO Section 2.6. Loose ends on the test list [%]
***** TODO Section 2.7. Summary
*** TODO 3. Refactoring in small steps [%]
***** TODO Section 3.1. Exploring a potential solution [%]
***** TODO Section 3.2. Changing design in a controlled manner [%]
***** TODO Section 3.3. Taking the new design further [%]
***** TODO Section 3.4. Summary
*** TODO 4. Concepts and patterns for TDD [%]
***** TODO Section 4.1. How to write tests and make them pass [%]
***** TODO Section 4.2. Essential testing concepts [%]
***** TODO Section 4.3. Closer look into test doubles [%]
***** TODO Section 4.4. Guidelines for testable designs [%]
***** TODO Section 4.5. Unit-testing patterns [%]
***** TODO Section 4.6. Working with legacy code [%]
***** TODO Section 4.7. Summary
* TODO Part 2: Applying TDD to specific technologies [%]
*** TODO 5. Test-driving web components [%]
***** TODO Section 5.1. MVC in web applications in 60 seconds [%]
***** TODO Section 5.2. Taming the controller [%]
***** TODO Section 5.3. Creating the view test-first [%]
***** TODO Section 5.4. TDD with component-based web frameworks [%]
***** TODO Section 5.5. Summary
*** TODO 6. Test-driving data access [%]
***** TODO Section 6.1. Exploring the problem domain [%]
***** TODO Section 6.2. Driving data access with unit tests [%]
***** TODO Section 6.3. Writing integration tests before the code [%]
***** TODO Section 6.4. Integration tests in action [%]
***** TODO Section 6.5. Populating data for integration tests [%]
***** TODO Section 6.6. Should I drive with unit or integration tests? [%]
***** TODO Section 6.7. File-system access [%]
***** TODO Section 6.8. Summary
*** TODO 7. Test-driving the unpredictable [%]
***** TODO Section 7.1. Test-driving time-based functionality [%]
***** TODO Section 7.2. Test-driving multithreaded code [%]
***** TODO Section 7.3. Standard synchronization objects [%]
***** TODO Section 7.4. Summary
*** TODO 8. Test-driving Swing [%]
***** TODO Section 8.1. What to test in a Swing UI [%]
***** TODO Section 8.2. Patterns for testable UI code [%]
***** TODO Section 8.3. Tools for testing view components [%]
***** TODO Section 8.4. Test-driving a view component [%]
***** TODO Section 8.5. Summary
* TODO Part 3: Building products with Acceptance TDD [%]
*** TODO 9. Acceptance TDD explained [%]
***** TODO Section 9.1. Introduction to user stories [%]
***** TODO Section 9.2. Acceptance tests [%]
***** TODO Section 9.3. Understanding the process [%]
***** TODO Section 9.4. Acceptance TDD as a team activity [%]
***** TODO Section 9.5. Benefits of acceptance TDD [%]
***** TODO Section 9.6. What are we testing, exactly? [%]
***** TODO Section 9.7. Brief overview of available tools [%]
***** TODO Section 9.8. Summary
*** TODO 10. Creating acceptance tests with Fit [%]
***** TODO Section 10.1. What’s Fit? [%]
***** TODO Section 10.2. Three built-in fixtures [%]
***** TODO Section 10.3. Beyond the built-ins with FitLibrary [%]
***** TODO Section 10.4. Executing Fit tests [%]
***** TODO Section 10.5. Summary
*** TODO 11. Strategies for implementing acceptance tests [%]
***** TODO Section 11.1. What should acceptance tests test? [%]
***** TODO Section 11.2. Implementation approaches [%]
***** TODO Section 11.3. Technology-specific considerations [%]
***** TODO Section 11.4. Tips for common problems [%]
***** TODO Section 11.5. Summary
*** TODO 12. Adopting TDD [%]
***** TODO Section 12.1. What it takes to adopt TDD [%]
***** TODO Section 12.2. Getting others aboard [%]
***** TODO Section 12.3. How to fight resistance [%]
***** TODO Section 12.4. How to facilitate adoption [%]
***** TODO Section 12.5. Summary
* TODO A. Brief JUnit 4 tutorial
* TODO B. Brief JUnit 3.8 tutorial
* TODO C. Brief EasyMock tutorial
* TODO D. Running tests with Ant [%]
*** TODO Section D.1. Project directory structure
*** TODO Section D.2. The basics: compiling all source code
*** TODO Section D.3. Adding a target for running tests
*** TODO Section D.4. Generating a human-readable report
* TODO Resources [%]
*** TODO Works cited
*** TODO Additional resources
*** TODO Online resources
*** TODO Index
