#+DATE: 2013-01-05 Sat. 14:07
#+LAYOUT: post
#+TITLE: PIH - ch7 - Higher-order Functions 1/3
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+CATEGORIES: haskell, exercises, functional-programming
#+DESCRIPTION: Higher order functions, function composition, foldr, foldl exercises.
#+STARTUP: indent
#+STARTUP: hidestars

In this chapter were described:
- *higher-order functions*

No difference exists between a value and a function, thus permitting a function to either manipulate other functions, either returning another function (or both).

- *composition of functions*
As in mathematics, a function can be composed of multiple other functions.

- *foldr definition*:
It's a basic function that represents a recursion pattern that's associative to the right.

- *foldl definition*
It's another basic function representing another recursion pattern associative to the left.

In this post, I'll first give my solutions for the first 5 exercises of the chapter.

* Higher-order functions
#+begin_quote
Show how the list comprehension =[ f x | x ← xs, p x ]= can be re-expressed using the higher-order functions *map* and *filter*.
#+end_quote

What does the list comprehension do?
- filter all elements from *xs* according to the predicate *p*
- then apply *f* on the remaining elements

#+begin_src haskell
fmap0 :: (a -> a) -> (a -> Bool) -> [a] -> [a]
fmap0 f p xs = [ f x | x <- xs, p x]
#+end_src

Here is an example with:
- =(+1)= as the function =f=,
- =even= as the predicate =p=
- =[1..10]= as the list =xs=

#+begin_src haskell
*Ch7> fmap0 (+1) even [1..10]
[3,5,7,9,11]
#+end_src

With the preceding definition, we can indeed write the same definition using =map= and =filter=:

#+begin_src haskell
fmap1 :: (a -> a) -> (a -> Bool) -> [a] -> [a]
fmap1 f p xs = map f (filter p xs)
#+end_src

Using the same example:

#+begin_src haskell
*Ch7> fmap1 (+1) even [1..10]
[3,5,7,9,11]
#+end_src

* Define HOF
#+begin_quote
Without looking at the definitions from the standard prelude, define the higher-order functions *all*, *any*, *takeWhile*, and *dropWhile*.
#+end_quote

** all
/Check that given a predicate and a list of elements, all the elements satisfies this predicate./

Recall the =and= function:

#+begin_src haskell
and :: [Bool] -> Bool
and = foldl (&&) True
#+end_src

So composing the mapping of the predicate =p= to the =and= function will do the trick.

#+begin_src haskell
all :: (a -> Bool) -> [a] -> Bool
all p = and . map p
#+end_src

Example:
#+begin_src haskell
*Ch7> all even [1,2,4]
False
*Ch7> all even [0,2,4]
True
#+end_src

** any

/Check that given a predicate and a list of elements, at least one of those elements satisfies this predicate./

#+begin_src haskell
any :: (a -> Bool) -> [a] -> Bool
any p = or . map p
#+end_src

#+begin_src haskell
*Ch7> any odd [0,2,1]
True
*Ch7> any odd [0,2,4]
False
#+end_src

** takeWhile
/Given a predicate and a list of elements, take those elements as long as the predicate is satisfied./

#+begin_src haskell
takeWhile :: (a -> Bool) -> [a] -> [a]
takeWhile _ [] = []
takeWhile p (x:xs) | p x       = x : takeWhile p xs
                   | otherwise = []
#+end_src

Examples:
#+begin_src haskell
*Ch7> takeWhile even [0,2,3,4,5,6]
[0,2]
*Ch7> takeWhile even []
[]
#+end_src

** dropWhile
/Given a predicate and a list of elements, drop those elements as long as the predicate is satisfied./

#+begin_src haskell
dropWhile :: (a -> Bool) -> [a] -> [a]
dropWhile _ [] = []
dropWhile p (x:xs) | p x        = dropWhile p xs
                    | otherwise  = x : xs
#+end_src

Examples:
#+begin_src haskell
*Ch7> dropWhile odd [1,3,5,7,0,2,3,4,5,6]
[0,2,3,4,5,6]
*Ch7> dropWhile odd []
[]
#+end_src

* map, filter
#+begin_quote
Redefine the functions *map f* and *filter p* using *foldr*.
#+end_quote

** map
The recursive definition of =map= follows the recursive pattern that =foldr= represents.

Here is the definition of =map= using recursion:
#+begin_src haskell
mrmap :: (a -> a) -> [a] -> [a]
mrmap _ [] = []
mrmap g (x:xs) = f x:(mrmap g xs)
#+end_src

Recall the definition of =foldr=:
#+begin_src haskell
mfoldr :: (a -> b -> b) -> b -> [a] -> b
mfoldr _ v [] = v
mfoldr f v (x:xs) = f x (mfoldr f v xs)
#+end_src

Following this, we can define =map= using =foldr= like this:
#+begin_src haskell
map :: (a -> b) -> [a] -> [b]
map f = foldr (\ x xs -> f x : xs) []
#+end_src

Example:
#+begin_src haskell
*ch7> map even [1,2,3]
[False,True,False]
*Ch7> map (*3) [1,2,3]
[3,6,9]
#+end_src

** filter
The same way, here is the definition of =filter= using recursion:
#+begin_src haskell
mfilter :: (a -> Bool) -> [a] -> [a]
mfilter p xs = [x | x <- xs, p x]
#+end_src

Then:
#+begin_src haskell
filter :: (a -> Bool) -> [a] -> [a]
filter p = foldr (\ x xs -> if (p x) then x : xs else xs) []
#+end_src

* dec2int
#+begin_quote
Using *foldl*, define a function =dec2int :: [ Int ] → Int= that converts a decimal number into an integer.

For example:
#+begin_src haskell
> dec2int [2, 3, 4, 5]
2345
#+end_src
#+end_quote

Given a list of int [d,c,b,a] representing a 4-digit number, a decimal conversion can be rewritten like this:

#+begin_src text
[d, c, b, a]
1000 * d + 100 * c + 10 * b + 1 * a
(100 * d + 10 * c + b) * 10 + a
(((10 * d + c) * 10) + b) * 10 + a
((((d + 0) * 10 + c) * 10) + b) * 10 + a
#+end_src

What do we see from this:
- It's =associative to the left=.
- The initial value is =0=.
- The pattern we see is =x * 10 + y=

Indeed, we can then use =foldl= to define =dec2int=:
#+begin_src haskell
dec2int :: [Int] -> Int
dec2int = foldl (\ x y -> x * 10 + y) 0
#+end_src

Example:
#+begin_src haskell
*Ch7> dec2int [2,3,4,5]
2345
*Ch7> dec2int [9,8,7,5,3,0]
987530
#+end_src

* Invalid definition
#+begin_quote
Explain why the following definition is invalid:
#+begin_src haskell
sumsqreven = compose [sum, map (↑2), filter even]=
#+end_src
#+end_quote

Recall the definition of the =compose= function:

#+begin_src haskell
compose :: [a -> a] -> (a -> a)
compose = foldr (.) id
#+end_src

The signatures of the functions in the problem:
#+begin_src haskell
sum         :: [Int] -> Int
map (^2)    :: [Integer] -> [Integer]
filter even :: [Integer] -> [Integer]
#+end_src

Because of the =sum= function, the signatures of the list does not match the one of =compose=.

For it to work, we must separate the =sum= from the other function:

#+begin_src haskell
sumsqeven :: [Integer] -> Integer
sumsqeven = sum . (compose [map (^2), filter even])
#+end_src

Example:
#+begin_src haskell
*Ch7> sumsqeven [1..10]
220
*Ch7> sumsqeven [0,1,2]
4
#+end_src
