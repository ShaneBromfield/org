#+BLOG: tony-blog
#+POSTID: 812
#+DATE: [2013-01-01 mar. 12:07]
#+TITLE: Programming in haskell - ch6 - Recursive functions - exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming, recursion
#+CATEGORY: haskell, exercises, functional-programming
#+DESCRIPTION: Learning haskell and solving problems using reasoning and 'repl'ing
#+STARTUP: indent
#+STARTUP: hidestars

* Exponentiation
#+begin_quote
Define the exponentiation operator ↑ for non-negative integers using the
same pattern of recursion as the multiplication operator =∗=, and show how *2 ↑ 3* is evaluated using your definition.
#+end_quote

#+begin_src text
(^) :: Int -> Int -> Int
_ ^ 0 = 1
x ^ n = x * (x ^ (n-1))
#+end_src

#+begin_src text
2 ^ 3 = 2 * (2 ^ 2)
      = 2 * 2 * (2 ^ 1)
      = 2 * 2 * 2 * (2 ^ 0)
      = 2 * 2 * 2 * 1
      = 8
#+end_src

* evaluated
#+begin_quote
Using the definitions given in this chapter, show how *length [1, 2, 3]*,
*drop 3 [1, 2, 3, 4, 5]*, and *init [1, 2, 3]* are evaluated.
#+end_quote

** length
Given the definition:
#+begin_src text
length :: [a] -> Int
length [] = 0
length (_:xs) = 1 + length xs
#+end_src

#+begin_src text
length [1,2,3] = 1 + length [2,3]
               = 1 + 1 + length [3]
               = 1 + 1 + 1 + length []
               = 1 + 1 + 1 + 0
               = 3
#+end_src

** drop
Given the definition:
#+begin_src text
drop :: Int -> [a] -> [a]
drop 0 ys = ys
drop _ [] = []
drop n (_:ys) = drop (n-1) ys
#+end_src

#+begin_src text
drop 3 [1,2,3,4,5] = drop 2 [2,3,4,5]
                   = drop 1 [3,4,5]
                   = drop 0 [4,5]
                   = [4,5]
#+end_src

** init
Given the definition:
#+begin_src text
init :: [a] -> [a]
init [_] = []
init (x:xs) = x:(init xs)
#+end_src

#+begin_src text
init [1,2,3] = 1:(init [2,3])
             = 1:2:(init [3])
             = 1:2:[]
             = [1,2]
#+end_src
* functions
#+begin_quote
Without looking at the definitions from the standard prelude, define the
following library functions using recursion:
-- and
-- concat
-- replicate
-- (!!)
-- elem

*Note:* most of these functions are in fact defined in the prelude using other
library functions, rather than using explicit recursion.
#+end_quote

** *and*
#+begin_quote
-- Decide if all logical values in a list are True: =and :: [Bool] → Bool=
#+end_quote

#+begin_src text
and :: [Bool] -> Bool
and [] = True
and (x:xs) = x && (and xs)
#+end_src

Example:
#+begin_src text
*Ch6> and [True, True, True]
True
*Ch6> and [True, False, True]
False
#+end_src

** *concat*
#+begin_quote
-- Concatenate a list of lists: =concat :: [[a] ] → [a]=
#+end_quote

#+begin_src text
concat :: [[a]] -> [a]
concat [xs] = xs
concat (xs:xxs) = xs ++ (concat xxs)
#+end_src

Example:
#+begin_src text
*Ch6> concat [[1..10], [2,4], [20..25]]
[1,2,3,4,5,6,7,8,9,10,2,4,20,21,22,23,24,25]
#+end_src
** *replicate*
#+begin_quote
-- Produce a list with n identical elements: =replicate :: Int → a → [a]= \\
#+end_quote

#+begin_src text
replicate :: Int -> a -> [a]
replicate 0 _ = []
replicate n x = x:(replicate (n-1) x)
#+end_src

Example:
#+begin_src text
*Ch6> replicate 10 'a'
"aaaaaaaaaa"
*Ch6> replicate 5 9
[9,9,9,9,9]
#+end_src
** *(!!)*
#+begin_quote
-- Select the n^th element of a list: =(!!) :: [a] → Int → a= \\
#+end_quote

#+begin_src text
(!!) :: [a] -> Int -> a
(x:_) !! 0 = x
(_:xs) !! n = xs !! (n-1)
#+end_src

Example:
#+begin_src text
*Ch6> [1,2,3] !! 2
3
*Ch6> [1,2,3] !! 0
1
#+end_src

** *elem*
#+begin_quote
-- Decide if a value is an element of a list: =elem :: Eq a ⇒ a → [a] → Bool= \\
#+end_quote

#+begin_src text
elem :: Eq a => a -> [a] -> Bool
elem _ [] = False
elem x (y:ys) | x == y    = True
              | otherwise = elem x ys
#+end_src

Example:
#+begin_src text
*Ch6> elem 1 [10,20,30]
False
*Ch6> elem 10 [10,20,30]
True
*Ch6> elem 40 [10,20,30,40]
True
#+end_src

* merge
#+begin_quote
Define a recursive function =merge :: Ord a ⇒ [a] → [a] → [a]= that
merges two sorted lists to give a single sorted list.

For example:

> merge [2, 5, 6] [1, 3, 4]
[1, 2, 3, 4, 5, 6]

*Note:* your definition should not use other functions on sorted lists such as
*insert* or *isort*, but should be defined using explicit recursion.
#+end_quote

#+begin_src text
merge :: Ord a => [a] -> [a] -> [a]
merge [] ys = ys
merge xs [] = xs
merge (x:xs) (y:ys) | x <= y    = x : merge xs     (y:ys)
                    | otherwise = y : merge (x:xs) ys
#+end_src

Example:
#+begin_src text
*Ch6> merge [2,5,6] [1,3,4]
[1,2,3,4,5,6]
*Ch6> merge [10..20] [1..10]
[1,2,3,4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,18,19,20]
#+end_src

* msort
#+begin_quote
Using *merge*, define a recursive function =msort :: Ord a ⇒ [a] → [a]= that
implements merge sort, in which the empty list and singleton lists are already
sorted, and any other list is sorted by merging together the two lists that
result from sorting the two halves of the list separately.

*Hint:*
First define a function =halve :: [a] → ([a], [a])= that splits a list into
two halves whose lengths differ by at most one.
#+end_quote

First, following the hint, we define a *halve* function:
#+begin_src text
halve :: [a] -> ([a], [a])
halve xs = splitAt (length xs `div` 2) xs
#+end_src

As an example:
#+begin_src text
*Ch6> halve [1,2,3]
([1],[2,3])
*Ch6> fst ([1],[2,3])
[1]
*Ch6> snd ([1],[2,3])
[2,3]
#+end_src

Now:
#+begin_src text
msort :: Ord a => [a] -> [a]
msort [] = []
msort [x] = [x]
msort xs = merge (msort fh) (msort sh)
           where
             (fh, sh) = halve xs
#+end_src

Example:
#+begin_src text
*Ch6> msort [3,2,90,54,1]
[1,2,3,54,90]
#+end_src

* sum
#+begin_quote
Using the five-step process, define the library functions that calculate the
*sum* of a list of numbers, *take* a given number of elements from the start of
a list, and select the *last* element of a non-empty list.
#+end_quote

** *sum*
#+begin_quote
Calculate the *sum* of a list of numbers.
#+end_quote

*** Step 1 - define the types
#+begin_src text
sum :: Num a => [a] -> a
#+end_src
*** Step 2 - enumerate the cases
Then what are the cases:
#+begin_src text
sum []
sum (x:xs)
#+end_src
*** Step 3 - Define the simple case
Then defining it:
#+begin_src text
sum [] = 0
#+end_src

0 is the identity of the sum.
*** Step 4 - Define the other cases
#+begin_src text
sum (x:xs) = x + sum xs
#+end_src
*** Step 5 - Generalise and simplify

First, what do we got?

#+begin_src text
sum :: Num a => [a] -> a
sum [] = 0
sum (x:xs) = x + sum xs
#+end_src

This follows the same recursion pattern that the one for *product*, which is encapsulated in the *foldr* function, thus simplifying gives:
#+begin_src text
sum :: Num a => [a] -> a
sum = foldr (+) 0
#+end_src

Example:
#+begin_src text
*Ch6> summ [3,2,90,54,1]
150
#+end_src

** *take*
#+begin_quote
*take* a given number of elements.
#+end_quote


*** Step 1 - define the types
#+begin_src text
take :: Int -> [a] -> [a]
#+end_src
*** Step 2 - enumerate the cases
Then what are the cases:
- we take no elements in any list
- or we take some elements in an empty list.

#+begin_src text
take 0 _ =
take _ [] =
#+end_src
*** Step 3 - Define the simple case
Either way, we return an empty list.
#+begin_src text
take 0 _ = []
take _ [] = []
#+end_src
*** Step 4 - Define the other cases
We take the head of the list, it becomes the head of a new list.
The tail of the list is made by taking *n-1* elements in *xs*.
#+begin_src text
take n (x:xs) = x : (take (n-1) xs)
#+end_src
*** Step 5 - Generalise and simplify
First, what do we got?

#+begin_src text
take :: Int -> [a] -> [a]
take 0 _ = []
take _ [] = []
take n (x:xs) = x : (take (n-1) xs)
#+end_src

Example:
#+begin_src text
*Ch6> take 0 [1..10]
[]
*Ch6> take 10 []
[]
*Ch6> take 3 [1..10]
[1,2,3]
#+end_src

** *last*
#+begin_quote
Select the *last* element of a non empty list.
#+end_quote


*** Step 1 - define the types
#+begin_src text
#+end_src
*** Step 2 - enumerate the cases
Then what are the cases:
#+begin_src text
#+end_src
*** Step 3 - Define the simple case
Then defining it:
#+begin_src text
#+end_src
*** Step 4 - Define the other cases
#+begin_src text
#+end_src
*** Step 5 - Generalise and simplify
First, what do we got?

#+begin_src text
#+end_src

Example:
#+begin_src text
#+end_src
