#+BLOG: tony-blog
#+POSTID: 1068
#+DATE: [2013-04-28 dim. 21:11]
#+BLOG: tony-blog
#+TITLE: PIH - ch10 - 3/3 - Declaring types and classes - exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming, types, classes, abstract-machine
#+CATEGORY: haskell, exercises, functional-programming, types, classes, abstract-machine
#+DESCRIPTION: Tautology extension and interactive tautology checkers
#+STARTUP: indent

The last part of the chapter 10.
[[http://adumont.fr/blog/?p%3D1050][First]] and [[http://adumont.fr/blog/?p%3D1064][second]].

* Abstract Machine
#+BEGIN_QUOTE
Extend the abstract machine to support the use of multiplication.
#+END_QUOTE

The code adapted to deal with multiplication:
#+begin_src haskell
data Expr = Val Int | Add Expr Expr | Mult Expr Expr deriving Show

data Op = EVALM Expr | EVALA Expr | MUL Int | ADD Int deriving Show

type Cont = [Op]

eval :: Expr -> Cont -> Int
eval (Val n)    c = exec c n
eval (Mult x y) c = eval x (EVALM y : c)
eval (Add x y)  c = eval x (EVALA y : c)

exec :: Cont -> Int -> Int
exec []            n = n
exec (EVALM y : c) n = eval y (MUL n : c)
exec (EVALA y : c) n = eval y (ADD n : c)
exec (MUL m : c)   n = exec c (n * m)
exec (ADD m : c)   n = exec c (n + m)

val :: Expr -> Int
val e = eval e []
#+end_src

Output:
#+begin_src haskell
*AbstractMachine> val (Mult (Val 10) (Val 5))
50
*AbstractMachine> val (Add (Mult (Val 10) (Val 5)) (Val 100))
150
#+end_src

* Instance
#+BEGIN_QUOTE
Complete the following instance declarations:
=
instance Monad Maybe where
···
instance Monad [] where
···
=
In this context, [] denotes the list type [a] without its parameter.

_Hint:_ First write down the types of =return= and =>>== for each instance.
#+END_QUOTE

** May(be)

*** data
The data May(be) definition:
#+begin_src haskell
data May a = Noth | Jus a
#+end_src

*** inject
To inject a value into the Maybe world, we wrap this value into a Jus and we're done:

#+begin_src haskell
         return = Jus
#+end_src

*** bind
- Noth binds to anything is Noth.
- And if it is a value (Jus x)m then we can bind it to the monadic function f (f x).

#+begin_src haskell
         Noth  >>= _ = Noth
         (Jus x) >>= f = f x
#+end_src

*** complete
Complete definition:
#+begin_src haskell
data May a = Noth | Jus a

instance Monad May where
         return = Jus

         Noth  >>= _ = Noth
         (Jus x) >>= f = f x

#+end_src

** []
*** inject
To inject a value in the monadic world of list, just create a singleton list with this value:
#+begin_src haskell
-- return :: a -> [a]
return x = [x]
#+end_src

*** bind

To bind a list to the monadic function f, apply the monadic function f to the content of the list (so concatMap):

#+begin_src haskell
-- [a] -> (a -> [b]) -> [b]
l >>= f = concatMap f l
#+end_src

*** complete

#+begin_src haskell
instance Monad [] where
         return v = [v]

         -- m a -> (a -> m b) -> m b
         -- [a] -> (a -> [b]) -> [b]
         l >>= f = concatMap f l
#+end_src
