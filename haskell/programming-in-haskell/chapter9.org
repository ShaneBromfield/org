#+BLOG: tony-blog
#+TITLE: Programming in haskell - ch9 - Interactive programs - exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming
#+CATEGORY: haskell, exercises, functional-programming
#+DESCRIPTION: Learning haskell and solving problems using reasoning and 'repl'ing
#+STARTUP: indent
#+STARTUP: hidestars odd

* readLine
#+begin_quote
Define an action =readLine :: IO String= that behaves in the same way as =getLine=, except that it also permits the delete key to be used to remove characters.

_Hint:_ the delete character is ’\DEL’, and the control string for moving the cursor back one character is "\ESC[1D".
#+end_quote

* Beep -> Error
#+begin_quote
Modify the calculator program to indicate the approximate position of an error rather than just sounding a beep, by using the fact that the parser returns the unconsumed part of the input string.
#+end_quote

* Flicker
#+begin_quote
On some systems the game of life may flicker, due to the entire screen being cleared each generation.
Modify the game to avoid such flicker by only redisplaying positions whose status changes.
#+end_quote
* Editor
#+begin_quote
Produce an editor that allows the user to interactively create and modify the content of the board in the game of life.
#+end_quote
* Graphical calculator
#+begin_quote
Produce graphical versions of the calculator and game of life programs, using one of the graphics libraries available from [[www.haskell.org]].
#+end_quote
* Nim
#+begin_quote
Nim is a game that is played on a board comprising five numbered rows of stars, which is initially set up as follows:

1:∗∗∗∗∗

2:∗∗∗∗

3:∗∗∗

4:∗∗

5:∗

Two players take it in turn to remove one or more stars from the end of a single row.
The winner is the player who removes the last star or stars from the board.
Implement the game of nim in Haskell.

_Hint:_ represent the board as a list comprising the number of stars remaining on each row, with the initial board being =[5, 4, 3, 2, 1]=.
#+end_quote
