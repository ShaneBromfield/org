#+TITLE: PIH - ch13 - Reasoning about programs - exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming, induction, proof
#+CATEGORY: haskell, exercises, functional-programming, induction, proof
#+DESCRIPTION: Learning haskell and solving problems using reasoning and 'repl'ing
#+STARTUP: indent
#+STARTUP: hidestars odd

* Overlapping patterns
#+begin_quote
Give an example of a function from the standard library in appendix A that is defined using overlapping patterns.
#+end_quote

Example using overlapping patterns:
#+begin_src haskell
null :: [a] -> Bool
null [] = True
null (_ : _) = False
#+end_src

* Proof by induction
#+begin_quote
Show that =add n (Succ m) = Succ (add n m)=, by induction on n.
#+end_quote

Recall the definition:

#+begin_src haskell
data Nat = Zero | Succ Nat

add :: Nat -> Nat -> Nat
add Zero m = m                  -- (1)
add (Succ n) m = Succ (add n m) -- (2)
#+end_src

To prove by induction on n the asked properties, we'll begin by the base case:

#+begin_src haskell
add Zero (Succ m) = Succ m            -- by definition of (1)
                  = Succ (add Zero m) -- (2)
#+end_src
Ok, the base case is sound.

Now, we can focus on the inductive case:
#+begin_src haskell
add (Succ n) (Succ m) = Succ (add n (Succ m)) -- using the induction hypothesis
                      = Succ (Succ (add n m))
                      = Succ (add (Succ n) m)
#+end_src
So the property holds.

* commutativity
#+begin_quote
Using this property, together with =add n Zero = n=, show that addition is commutative, =add n m = add m n=, by induction on n.
#+end_quote

Again, base case first:
#+begin_src haskell
add Zero m = m
           = add m Zero -- property of add in the previous exercise.
#+end_src
ok.

Now, inductive case:
#+begin_src haskell
add (Succ n) m = Succ (add n m) -- by hypothesis
               = Succ (add m n)
               = add m (Succ n) -- using property add n (Succ m) = Succ (add n m)
#+end_src
The property holds.

The base case is ok and the inductive case holds the property.
So by induction, the hypothesis is sound, add is commutative.

* all true
#+begin_quote
Using the following definition for the library function that decides if all elements of a list satisfy a predicate:

=all p [] = True=

=all p (x : xs) = p x && all p xs=

Complete the proof of the correctness of =replicate= by showing that it produces a list with identical elements, =all (== x) (replicate n x)=, by induction on n ≥ 0.

_Hint:_ show that the property is always True.
#+end_quote

Recall replicate's definition:
#+begin_src haskell
replicate :: Int -> a -> [a]
replicate 0 _ = []
replicate n x = x:replicate (n-1) x
#+end_src

base case:
#+begin_src haskell
all (== x) (replicate 0 x) = all (== x) [] -- by definition of replicate
                           = True          -- by definition of all
#+end_src
ok.

Inductive case:
#+begin_src haskell
all (== x) (replicate (n+1) x) = all (== x) (x:replicate n x)             -- by definition of all
                               = ((== x) x) && all (== x) (replicate n x)
                               = True && all (== x) (replicate n x)       -- by hypothesis
                               = True
#+end_src
ok.

* Checks
#+begin_quote
Using the definition

=[] ++ ys = ys= (1)

=(x:xs) ++ ys = x:(xs ++ ys)= (2)

verify the following two properties, by induction on xs:

=xs ++ [] = xs=

=xs ++ (ys ++ zs) = (xs ++ ys) ++ zs=

_Hint:_ the proofs are similar to those for the add function.
#+end_quote

base case:
#+begin_src haskell
[] ++ [] = []                       -- using 1)

[] ++ (ys ++ zs) = ys ++ zs         -- using 1)
                 = ([] ++ ys) ++ zs
#+end_src
ok

Inductive case:
#+begin_src haskell
(x:xs) ++ [] = x:(xs ++ []) -- using induction hypothesis
             = (x:xs)

(x:xs) ++ (ys ++ zs) = x:(xs ++ (ys ++ zs)) -- induction hypothesis
                     = x:((xs ++ ys) ++ zs
                     = (x:(xs ++ ys) ++ zs
                     = ((x:xs) ++ ys) ++ zs
#+end_src
ok.

* Proof on map and composition of functions
#+begin_quote
Using the definitions

=map f [] = []=

=map f (x : xs) = f x : map f xs=

=(f . g) x = f (g x)=

show that =map f (map g xs) = map (f . g) xs=, by induction on xs.
#+end_quote

* take'n drop
#+begin_quote
Using the definition for =++= given above, together with:

=take 0 _ = []=

=take _ [] = []=

=take n (x:xs) = x:take (n-1) xs=

=drop 0 xs = xs=

=drop _ [] = []=

=drop n (_:xs) = drop (n-1) xs=

show that =take n xs ++ drop n xs = xs= , by simultaneous induction on the integer n ≥ 0 and the list xs.
_Hint:_ there are three cases, one for each pattern of arguments in the definitions of =take= and =drop=.
#+end_quote

* Tree
#+begin_quote
Given the type declaration =data Tree = Leaf Int | Node Tree Tree=, show that the number of leaves in a such a tree is always one greater than the number of nodes, by induction on trees.
_Hint:_ start by defining functions that count the number of leaves and nodes in a tree.
#+end_quote

* comp
#+begin_quote
Given the equation =comp' e c = comp e ++ c=, show how to construct the recursive definition for comp', by induction on e.
#+end_quote
