#+BLOG: tony-blog
#+POSTID: 1196
#+DATE: [2013-05-26 dim. 01:39]
#+BLOG: tony-blog
#+TITLE: PIH - ch11 - The countdown problem - exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming, countdown-problem
#+CATEGORY: haskell, exercises, functional-programming, countdown-problem
#+DESCRIPTION: The countdown problem (from 'Des chiffres et des Lettres')
#+STARTUP: indent
#+STARTUP: hidestars odd

It has been a while since I read some [[http://www.cs.nott.ac.uk/~gmh/book.htm][programming in haskell book]] ([[http://blog.pinboard.in/2013/04/the_matasano_crypto_challenges/][matasano challenges]], [[http://projecteuler.net/][euler problems]], [[http://www.4clojure.com/][4clojure problems]], and so on kept me busy :D).
So here it goes, the chapter 11 exercises was about the countdown problem.

Given a list of numbers and a result, find the possible operations which, when evaluated, renders such result.

* choices
#+begin_quote
Redefine the combinatorial function =choices= using a list comprehension rather than the library functions =concat= and =map=.
#+end_quote

My first point-free implementation:

#+begin_src haskell
choices :: [a] -> [[a]]
choices = (concatMap perms) . subs
#+end_src

Using list comprehension:
#+begin_src haskell
choices :: [a] -> [[a]]
choices xs = [ p | s <- subs xs, p <- perms s]

*Problem> choices [1,2,3]
[[],[3],[2],[2,3],[3,2],[1],[1,3],[3,1],[1,2],[2,1],[1,2,3],[2,1,3],[2,3,1],[1,3,2],[3,1,2],[3,2,1]]
*Problem> choices [1,2,3,4]
[[],[4],[3],[3,4],[4,3],[2],[2,4],[4,2],[2,3],[3,2],[2,3,4],[3,2,4],[3,4,2],[2,4,3],[4,2,3],[4,3,2],[1],[1,4],[4,1],[1,3],[3,1],[1,3,4],[3,1,4],[3,4,1],[1,4,3],[4,1,3],[4,3,1],[1,2],[2,1],[1,2,4],[2,1,4],[2,4,1],[1,4,2],[4,1,2],[4,2,1],[1,2,3],[2,1,3],[2,3,1],[1,3,2],[3,1,2],[3,2,1],[1,2,3,4],[2,1,3,4],[2,3,1,4],[2,3,4,1],[1,3,2,4],[3,1,2,4],[3,2,1,4],[3,2,4,1],[1,3,4,2],[3,1,4,2],[3,4,1,2],[3,4,2,1],[1,2,4,3],[2,1,4,3],[2,4,1,3],[2,4,3,1],[1,4,2,3],[4,1,2,3],[4,2,1,3],[4,2,3,1],[1,4,3,2],[4,1,3,2],[4,3,1,2],[4,3,2,1]]
#+end_src

* isChoice
#+begin_quote
Define a recursive function =isChoice :: Eq a ⇒ [a] → [a] → Bool= that decides if one list is chosen from another, without using the combinatorial functions =perms= and =subs=.

_Hint:_ start by defining a function that removes the first occurrence of a value from a list.
#+end_quote

We'll follow the hint and implement the function =remove1=:

#+begin_src haskell
remove1 :: Eq a => a -> [a] -> [a]
remove1 _ [] = []
remove1 x (y:ys)
  | x == y = ys
  | otherwise = y:remove1 x ys

*Problem> remove1 1 [3,2..1]
[3,2]
*Problem> remove1 1 [9,8..1]
[9,8,7,6,5,4,3,2]
*Problem> remove1 1 [9,8..0]
[9,8,7,6,5,4,3,2,0]
*Problem> remove1 1 [9,8..0] ++ [1]
[9,8,7,6,5,4,3,2,0,1]
#+end_src

Now, we can use it to help us implement the =isChoice= function

#+begin_src haskell
isChoice :: Eq a => [a] -> [a] -> Bool
isChoice [] _     = True
isChoice _ []     = False
isChoice (x:xs) l = elem x l && isChoice xs (remove1 x l)

*problem> isChoice [11] [1..10]
False
*Problem> isChoice [2..3] [1..10]
True
*Problem> isChoice [] [1..10]
True
*Problem> isChoice [] []
True
*Problem> isChoice [1..2] []
False
#+end_src

* split
#+begin_quote
What effect would generalising the function =split= to also return pairs containing the empty list have on the behaviour of solutions?
#+end_quote

Here is the =split= function:
#+begin_src haskell
split :: [a] -> [([a], [a])]
split []     = []
split [_]    = []
split (x:xs) = ([x], xs) : [(x: ls, rs) | (ls, rs) <- split xs]

*Problem> split [1,3,7,10,25,50]
[([1],[3,7,10,25,50]),([1,3],[7,10,25,50]),([1,3,7],[10,25,50]),([1,3,7,10],[25,50]),([1,3,7,10,25],[50])]
#+end_src

And the client call:
#+begin_src haskell
exprs :: [Int] -> [Expr]
exprs []  = []
exprs [x] = [Val x]
exprs xs  = [ x | (ls, rs) <- split xs,
                  l        <- exprs ls,
                  r        <- exprs rs,
                  x        <- combine l r]

Problem> exprs [1, 10]
[App Mul (Val 1) (Val 10),App Add (Val 1) (Val 10),App Sub (Val 1) (Val 10),App Div (Val 1) (Val 10)]
#+end_src

Adding the empty pairs to the existing result, =[[], l], [l, []]= (l is the initial list), would result in =exprs= to never reduce the size of the list when calling recursively =exprs=.
Thus breaking.

* Checks
#+begin_quote
Using =choices=, =exprs=, and =eval=, verify that there are 33665406 possible expressions over the numbers 1, 3, 7, 10, 25, 50, and that only 4672540 of these expressions evaluate successfully.
#+end_quote

Computing all possible expressions from all possible choices from the list [1, 3, 7, 10, 25, 50] renders:
#+begin_src haskell
*Problem> length [ es | cs <- choices [1,3,7,10,25,50], es <- exprs cs]
33665406
#+end_src

With the current definition of a valid expression:
#+begin_src haskell
valid :: Op -> Int -> Int -> Bool
valid Add x y = x <= y
valid Sub x y = x > y
valid Mul x y = x <= y && x /= 1 && y /= 1
valid Div x y = y /= 1 && x `mod` y == 0
#+end_src

Evaluating those valid expressions renders:
#+begin_src haskell
*Problem> length [ es | cs <- choices [1,3,7,10,25,50], es <- exprs cs, eval es /= []]
245644
#+end_src

which differs from the problem.

Using the basic implementation for =valid=, we obtain indeed the same number.

#+begin_src haskell
valid :: Op -> Int -> Int -> Bool
valid Add _ _ = True
valid Sub x y = x > y
valid Mul _ _ = True
valid Div x y = y /= 0 && x `mod` y == 0

*Problem> length [ es | cs <- choices [1,3,7,10,25,50], es <- exprs cs, eval es /= []]
4672540
#+end_src

* Checks 2
#+begin_quote
Similarly, verify that the number of expressions that evaluate successfully increases to 10839369 if the numeric domain is generalised to arbitrary integers.

_Hint:_ modify the definition of valid.
#+end_quote

Now modifying the signature of valid to permit no particular filter on those numbers:
#+begin_src haskell
valid :: Op -> Int -> Int -> Bool
valid Add _ _ = True
valid Sub _ _ = True
valid Mul _ _ = True
valid Div x y = y /= 0 && x `mod` y == 0
#+end_src

We obtain:
#+begin_src haskell
*Problem> length [ es | cs <- choices [1,3,7,10,25,50], es <- exprs cs, eval es /= []]
10839369
#+end_src

* Modifications
#+begin_quote
Modify the final program to:
- allow the use of exponentiation in expressions;
- produce the nearest solutions if no exact solution is possible;
- order the solutions using a suitable measure of simplicity.
#+end_quote

We first need to add the exp operation in the data Op:
#+begin_src haskell
-- operation
data Op = Add | Sub | Mul | Div | Exp deriving (Show)
#+end_src

Then update the definition of valid expression.
We will follow the same guideline, that is no negative exponent and as =a ^ 1 == a=, we will refuse any exponent 1.
Thus the following definition:

#+begin_src haskell
valid :: Op -> Int -> Int -> Bool
valid Add x y = x <= y
valid Sub x y = x > y
valid Mul x y = x <= y && x /= 1 && y /= 1
valid Div x y = y > 1 && x `mod` y == 0
valid Exp _ y = y == 0 || y > 1

*Problem> valid Exp 10 2
True
*Problem> valid Exp 10 (-1)
False
*Problem> valid Exp 10 1
False
#+end_src

Then updating the =apply= function to add the evaluation part of the Exp operation:
#+begin_src haskell
apply :: Op -> Int -> Int -> Int
apply Add x y = x + y
apply Sub x y = x - y
apply Mul x y = x * y
apply Div x y = x `div` y
apply Exp x y = x ^ y

*Problem> apply Exp 10 2
100
#+end_src

At last, updating the ops function to add Exp to the possible operations:
#+begin_src haskell
ops :: [Op]
ops = [Mul, Add, Sub, Div, Exp]
#+end_src

Now everything is good to be able to compute possible expressions.
For example, with 1, 2, 10, and a solution 100, we only have the expression 10 ^ 2:
#+begin_src haskell
*Problem> solutions' [1,2,10] 100
[App Exp (Val 10) (Val 2)]
#+end_src

* QuickCheck

We will use a little bit of quickCheck to ensure everything is still ok.

First we need to deal with the property we want to ensure is ok.
This property is the fact that every expression generated from the list [1, 3, 7, 10, 25, 50], for a given n, when evaluated, indeed renders [n].

For this, we will need a generator of not too big interval [1..1000] seems good.

#+begin_src haskell
prop_solution = forAll (elements [1..1000]) $ \n -> all (\x -> eval x == [n]) (solutions' [1, 3, 7, 10, 25, 50] n)
#+end_src

Then, as this treatment is heavy (the number of expressions can be quite huge), we will limit ourselves to only 2 passing tests (feel free to increase).

#+begin_src haskell
deepCheck :: Testable prop => prop -> IO ()
deepCheck p = verboseCheckWith stdArgs { maxSuccess = 2 } p
#+end_src

Now we can run the tests.
#+begin_src haskell
test :: IO ()
test = do
  deepCheck prop_solution

*Problem> test
Passed:
852
Passed:
332
+++ OK, passed 2 tests.
#+end_src

QuickCheck gave us the number it elected, for the curious, we can see those results:

#+begin_src haskell
*Problem> solutions' [1, 3, 7, 10, 25, 50] 852
[App Sub (App Mul (App Sub (Val 25) (Val 10)) (App Add (Val 7) (Val 50))) (Val 3),App Add (App Sub (Val 3) (Val 1)) (App Mul (App Add (Val 7) (Val 10)) (Val 50)),App Add (Val 3) (App Sub (App Mul (App Add (Val 7) (Val 10)) (Val 50)) (Val 1)),App Sub (App Add (Val 3) (App Mul (App Add (Val 7) (Val 10)) (Val 50))) (Val 1),App Sub (App Mul (App Add (Val 1) (Val 10)) (App Add (Val 7) (App Mul (Val 3) (Val 25)))) (Val 50),App Add (App Sub (Val 3) (App Exp (Val 1) (Val 25))) (App Mul (App Add (Val 7) (Val 10)) (Val 50)),App Sub (App Mul (App Sub (Val 25) (Val 7)) (App Sub (Val 50) (Val 1))) (App Mul (Val 3) (Val 10)),App Add (Val 3) (App Sub (App Mul (App Add (Val 7) (Val 10)) (Val 50)) (App Exp (Val 1) (Val 25))),App Sub (App Add (Val 3) (App Mul (App Add (Val 7) (Val 10)) (Val 50))) (App Exp (Val 1) (Val 25))]
*Problem> length $ solutions' [1, 3, 7, 10, 25, 50] 852
9
*Problem> length $ solutions' [1, 3, 7, 10, 25, 50] 332
145
#+end_src
