#+BLOG: tony-blog
#+POSTID: 632
#+DATE: [2012-12-23 Sun 18:52]
#+TITLE: Programming in haskell - Ch1 - Introduction - exercices
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming
#+CATEGORY: haskell, programming, functional-programming
#+DESCRIPTION: Learning haskell and solving problems using reasoning and 'repl'ing
#+STARTUP: indent
#+STARTUP: hidestars odd

It has been some time now (almost 2 years during my free time) that I:
- renewed with [[http://en.wikipedia.org/wiki/Functional_programming][Functional Programming]].
- learn [[http://clojure.org][clojure]] (I do not know all of it yet but i know enough to say, this is the way!)
- discovered the wonders of the [[http://en.wikipedia.org/wiki/Lisp_(programming_language)][Lisp family]] (i did learn some [[http://en.wikipedia.org/wiki/Common_Lisp][common-lisp]] through [[http://landoflisp.com/][the Land of Lisp]] and some [[http://www.gnu.org/software/emacs/manual/html_mono/elisp.html][emacs-lisp]] through [[http://www.gnu.org/s/emacs/][Emacs]]'s most amazing setup power)

Now, for the time being, I'd like to go and see what [[http://www.haskell.org/][Haskell]] is all about.
So here it is. I began reading [[http://www.cs.nott.ac.uk/~gmh/book.html][Programming in haskell]].

Here are my solutions to the exercises.
I did not yet [[http://www.cs.nott.ac.uk/~gmh/solutions.pdf][confront them]].

* Calculation
#+BEGIN_QUOTE
Give another possible calculation for the result of *double (double 2)*.
#+END_QUOTE

#+BEGIN_SRC text
double (double 2) = (double 2) + (double 2)
                  = (double 2) + (2 + 2)
                  = (double 2) + 4
                  = (2 + 2) + 4
                  = 4 + 4
                  = 8
#+END_SRC

* Proof
#+BEGIN_QUOTE
Show that sum [x] = x for any number x.
#+END_QUOTE

#+begin_src haskell
sum :: Num a => [a] -> a
sum [] = 0
sum (x:xs) = x + sum xs
#+END_SRC

Given the definition of the sum function:
#+BEGIN_SRC text
sum [x] = x + sum []
        = x + 0
        = x
#+END_SRC

* Product
#+BEGIN_QUOTE
Define a function product that produces the product of a list of numbers,
and show using your definition that product [2, 3, 4] = 24.
#+END_QUOTE

product:
#+begin_src haskell
pdt :: Num a => [a] -> a
pdt [] = 1
pdt (x:xs) = x * pdt xs
#+END_SRC

product [2,3,4] = 24?
#+BEGIN_SRC text
pdt [2,3,4] = 2 * pdt [3,4]
            = 2 * 3 * pdt [4]
            = 2 * 3 * 4 * pdt []
            = 2 * 3 * 4 * 1
            = 24
#+END_SRC

* Quicksort
#+BEGIN_QUOTE
How should the definition of the function qsort be modified so that it
produces a reverse sorted version of a list?
#+END_QUOTE

Given the following quicksort definition:

#+begin_src haskell
qsort :: Ord a => [a] -> [a]
qsort [] = []
qsort (x:xs) = qsort smaller ++ [x] ++ qsort larger
               where
                 smaller = filter (<= x) xs
                 larger  = filter (> x) xs
#+END_SRC

We want to modify such quicksort definition to reverse the output.
So from qsort *[4 6 2] => [2 4 6]* into *qsort [4 6 2] => 6 4 2*.

#+begin_src haskell
qsort :: Ord a => [a] -> [a]
qsort [] = []
qsort (x:xs) = qsort larger ++ [x] ++ qsort smaller
               where
                 smaller = filter (<= x) xs
                 larger  = filter (> x) xs
#+END_SRC
*Note* _++_ is the concatenation

To simplify the next proofs, we will prove that:
for any x, *qsort [x] = [x]*

#+BEGIN_SRC text
qsort [x] = qsort [] ++ [x] ++ qsort []
          = [] ++ [x] ++ []
          = [x]
#+END_SRC
case made.

Now solving the question:
#+BEGIN_SRC text
qsort [4,6,2] = qsort [6] ++ [4] ++ qsort [2]
              = [6] ++ [4] ++ [2]
              = [6,4,2]
#+END_SRC

* Quicksort 2/2
#+BEGIN_QUOTE
What would be the effect of replacing *<=* by *<* in the original definition
of qsort ? Hint: consider the example *qsort [2, 2, 3, 1, 1]*.
#+END_QUOTE

Given:
#+begin_src haskell
qsort :: Ord a => [a] -> [a]
qsort [] = []
qsort (x:xs) = qsort smaller ++ [x] ++ qsort larger
               where
                 smaller = filter (< x) xs
                 larger  = filter (> x) xs
#+END_SRC

This will filter out the duplicated entries.

Here is the solved example:
#+BEGIN_SRC text
qsort [2,2,3,1,1] = qsort [1] ++ [2] ++ qsort [3]
                  = [1] ++ [2] ++ [3]
                  = [1,2,3]
#+END_SRC
* Source
[[https://github.com/ardumont/my-haskell-lab/blob/master/src/ch1.hs][ch1.hs]]
