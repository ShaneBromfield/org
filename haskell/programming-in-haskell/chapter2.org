#+LAYOUT: post
#+DATE: [2012-12-24 Mon 14:59]
#+TITLE: Programming in haskell - Ch2 - First stepsb
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+CATEGORIES: haskell, exercises, functional-programming
#+DESCRIPTION: Learning haskell and solving problems using reasoning and 'repl'ing
#+STARTUP: indent
#+STARTUP: hidestars odd

* Parenthesis
#+BEGIN_QUOTE
Parenthesise the following arithmetic expressions:
- 2 ^ 3 ∗ 4
- 2 ∗ 3 + 4 ∗ 5
- 2 + 3 ∗ 4 ^ 5
#+END_QUOTE

#+BEGIN_SRC text
2^3*4 = (2^3)*4

2∗3+4∗5 = (2*3)+(4*5)

2+3*4^5 = 2+(3*(4^5))
#+END_SRC

* Execution
#+BEGIN_QUOTE
Work through the examples from this chapter using Hugs.
#+END_QUOTE

#+BEGIN_SRC text
2^3*4 =  32

2∗3+4∗5 = 26

2+3*4^5 = 3074
#+END_SRC

* Fix errors
#+BEGIN_QUOTE
The script below contains three syntactic errors. Correct these errors
and then check that your script works properly using Hugs.
#+END_QUOTE

#+begin_src haskell
N = a 'div' length xs
    where
      a = 10
      xs = [1, 2, 3, 4, 5]
#+END_SRC

Fixed:

#+begin_src haskell
n = a `div` length xs
    where
      a  = 10
      xs = [1, 2, 3, 4, 5]
#+END_SRC

* Definition of last
#+BEGIN_QUOTE
Show how the library function *last* that selects the last element of a non-
empty list could be defined in terms of the library functions introduced
in this chapter.
#+END_QUOTE

We can basically return the sequence and take the first element.

#+begin_src haskell
last1 :: [a] -> a
last1 xs = head (reverse xs)
#+END_SRC

#+BEGIN_QUOTE
Can you think of another possible definition?
#+END_QUOTE

We can take the i^th element where i^th element is the length of the list.

#+begin_src haskell
last2 :: [a] -> a
last2 xs = xs !! (length xs - 1)
#+END_SRC

Or we can make a sequence by dropping all elements but the last one and then retrieve the first element of such sequence:

#+begin_src haskell
last3 :: [a] -> a
last3 xs = head (drop i xs)
           where
             i = length xs - 1
#+END_SRC

* init
#+BEGIN_QUOTE
Show how the library function *init* that removes the last element from
a non-empty list could similarly be defined in two different ways.
#+END_QUOTE

We can take all the elements from the list except the last one.
#+begin_src haskell
init1 :: [a] -> [a]
init1 xs = take (length xs - 1) xs
#+END_SRC

Or reverse the list, remove the first element, then return the list again.
#+begin_src haskell
init2 :: [a] -> [a]
init2 xs  = reverse (drop 1 (reverse xs))
#+END_SRC

And as for the *drop 1* call goes, we can replace this by the *tail* call:
#+begin_src haskell
init3 :: [a] -> [a]
init3 xs  = reverse (tail (reverse xs))
#+END_SRC
* Source
[[https://github.com/ardumont/haskell-lab/blob/master/src/programming-in-haskell/ch2.hs][ch2.hs]]
