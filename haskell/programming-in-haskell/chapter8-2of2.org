#+DATE: [2013-04-13 sam. 20:13]
#+BLOG: tony-blog
#+POSTID: 1015
#+TITLE: PIH - ch8 2/2 - Functional parsers - exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming, parsers
#+CATEGORY: haskell, exercises, functional-programming, parsers
#+DESCRIPTION: Learning haskell and solving problems using reasoning and 'repl'ing
#+STARTUP: indent
#+STARTUP: hidestars odd

Here is the second part of the exercises from the chapter 8.
For the first part, [[http://adumont.fr/blog/?p=997][go here]].

* Efficiency
#+begin_quote
Explain why the final simplification of the grammar for arithmetic expressions has a dramatic effect on the efficiency of the resulting parser.

Hint: Begin by considering how an expression comprising a single number would be parsed if this step had not been made.
#+end_quote

We will try and parse a string with only one number to parse, "9" for example.

With this grammar:
#+begin_src txt
expr   ::= expr + expr | expr - expr | term
term   ::= term * term | term / term | factor
factor ::= (expr) | nat
nat    ::= 0 | 1 | ... |
#+end_src

The resulting parsing with the tryout and failures is:

#+ATTR_HTML: width=250px
[[./resources/ch8-ex5-1.jpg]]

For each step, recognise the right term in the grammar, will parse and fail each possible definition until finding the rightmost (and rightful) definition:
- trying and fail =expr + expr=, same with =expr - expr=, trying and succeed =term=
- trying and fail =term * term=, same with =term / term=, trying and succeed =factor=
- trying and fail =(expr)=, trying and succeed =nat=
- resolve to the right natural

With this factorised grammar:
#+begin_src txt
expr   ::= term (+ expr | - expr | epsilon)
term   ::= factor (* term | / term | epsilon)
factor ::= (expr) | nat
nat    ::= 0 | 1 | ... |
#+end_src

The resulting parsing tree is a lot smaller because of less tryout and failtures:

#+ATTR_HTML: width=250px
[[./resources/ch8-ex5-2.jpg]]

For each step, we try to parse right term in grammar, then the next symbol and fail, thus the first term parsed is the right one, no need to continue.

So with the first grammar, the efficiency of parsing will be proportional on the expression's size.
With the second left-factorized grammar, the parsing is reduced.

* Complete parser 1/2
#+begin_quote
Extend the parser for arithmetic expressions to support subtraction and division, based upon the following extensions to the grammar:
#+end_quote

#+begin_src txt
expr ::= term (+ expr | − expr | epsilon)
term ::= factor (∗ term | / term | epsilon)
#+end_src

The existing parsing function with the grammar without - and / operations:

#+begin_src haskell
expr :: Parser Int
expr = do t <- term
          do symbol "+"
             e <- expr
             return (t + e)
             +++ return t

term :: Parser Int
term = do f <- factor
          do symbol "*"
             t <- term
             return (t * f)
             +++ return f
#+end_src

We simply add the - and / operations, we obtain:
#+begin_src haskell
expr :: Parser Int
expr = do t <- term
          do symbol "+"
             e <- expr
             return (t + e)
             +++ do symbol "-"
                    e <- expr
                    return (t - e)
                 +++ return t

term :: Parser Int
term = do f <- factor
          do symbol "*"
             t <- term
             return (t * f)
             +++ do symbol "/"
                    t <- term
                    return (t `div` f)
                    +++ return f
#+end_src

Examples:
#+begin_src haskell
*Parsers> eval "1+2/3"
2
*Parsers> eval "(1+2)/3"
1
*Parsers> eval "1+(2/3)"
2
*Parsers> eval "1+(2*3)"
7
*Parsers> eval "1+2*3"
7
*Parsers> eval "1+2*3-3"
4
*Parsers> eval "1+2/3-3"
-1
#+end_src


* Complete parser 2/2
#+begin_quote
Further extend the grammar and parser for arithmetic expressions to support exponentiation, which is assumed to associate to the right and have higher priority than multiplication and division, but lower priority than parentheses and numbers.
For example, =2 ↑ 3 ∗ 4= means =(2 ↑ 3) ∗ 4=.

Hint: The new level of priority requires a new rule in the grammar.
#+end_quote

*** new grammar

Remark: The grammar's operator precedence follows the declaration order.

As:
- this new rule is of lesser priority than the parenthesis precedence but greater than '*' or '/', we place this new rule in between.
- the exponentiation associates to the right.

Here is the result:
#+begin_src txt
expr   ::= term (+ expr | - expr | epsilon)
term   ::= factor (* term | / term | epsilon)
factor ::= exp (^ factor | epsilon)
exp    ::= (expr) | nat
nat    ::= 0 | 1 | ... |
#+end_src

*** implementation

#+begin_src haskell
factor :: Parser Int
factor = do e <- expo
            do symbol "^"
               f <- factor
               return (e ^ f)
               +++ return e

expo :: Parser Int
expo = do symbol "("
          e <- expr
          symbol ")"
          return e
          +++ natural
#+end_src

Examples:
#+begin_src haskell
*Parsers> eval "2^3*4"
32
*Parsers> eval "(2^3)*4"
32
*Parsers> eval "2^(3*4)"
4096
#+end_src

* Grammar
#+begin_quote
Consider expressions built up from natural numbers using a subtraction operator that is assumed to associate to the left.
#+end_quote

*** Natural
#+begin_quote
Define a natural grammar for such expressions.
#+end_quote

#+begin_src txt
expr ::= expr - nat | nat
nat  ::= 0 | 1 | ...
#+end_src

*** Implementation
#+begin_quote
Translate this grammar into a parser expr :: Parser Int.
#+end_quote

#+begin_src haskell
xpr :: Parser Int
xpr = do e <- xpr
         symbol "-"
         n <- natural
         return (e - n)
         +++ natural
#+end_src

*** Problem
#+begin_quote
What is the problem with this parser?
#+end_quote

It loops until the stack blows.

#+begin_src haskell
*Parsers> parse xpr "1-2"
***Exception: stack overflow
#+end_src

*** Fix
#+begin_quote
Show how it can be fixed.

Hint: Rewrite the parser using the repetition primitive many and the library function foldl.
#+end_quote

#+./resources/ch8-ex5-1.jpg http://adumont.fr/blog/wp-content/uploads/2013/04/wpid-ch8-ex5-1.jpg
#+./resources/ch8-ex5-2.jpg http://adumont.fr/blog/wp-content/uploads/2013/04/wpid-ch8-ex5-2.jpg
