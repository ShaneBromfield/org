#+title: Learn you a Haskell for great good!

* DONE [[http://learnyouahaskell.com/introduction][Introduction]]
CLOSED: [2014-02-03 lun. 12:57]

* [[http://learnyouahaskell.com/starting-out][Starting out]]

* DONE [[http://learnyouahaskell.com/types-and-typeclasses][Types and TypeClasses]]
CLOSED: [2014-02-03 lun. 12:52]

- Everything in haskell has types
- Haskell has type inference
Haskell can infer types alone
It is not mandatory to provide informations about it (good convention to do it anyway)
- :: "has type of"
- a is a type variable
- functions using type variable are "polymorphic functions"
Ex:
#+begin_src haskell
head :: [a] -> a
#+end_src

- A typeclass is a sort of interface defining some behavior
if a type 'a is a part of a typeclass, that means that the type 'a implements the behavior of such typeclass

- class constraint
Everything before => is a class constraint
#+begin_src haskell
*Prelude> :t (==)
(==) :: Eq a => a -> a -> Bool
#+end_src

- type annotations :: to explicitely give the expected type

- `Eq` for equality testing type
The functions its members implement are `==` and `/=`.

- `Ord` if for ordering types
covers the functions such as >, <, <=, >=

- `Ordering` is type that can be GT, LT, EQ

- `Enum` members are sequentially ordered types (['a'..'z'], Succ 'a', etc...)

* [[http://learnyouahaskell.com/syntax-in-functions][Syntax in functions]]

* [[http://learnyouahaskell.com/recursion][Recursion]]

* [[http://learnyouahaskell.com/higher-order-functions][Higher Order Functions]]

* [[http://learnyouahaskell.com/modules][Modules]]

* [[http://learnyouahaskell.com/making-our-own-types-and-typeclasses][Making our own types and typeclasses]]

** [[http://learnyouahaskell.com/making-our-own-types-and-typeclasses#the-functor-typeclass][Functor]]

Typeclass to map over something:
#+begin_src Haskell
    class Functor f where
        fmap :: (a -> b) -> f a -> f b
#+end_src
f is a type constructor.

Ex:
- map is a functor specific for list:
#+begin_src haskell
map :: (a -> b) -> [a] -> [b]
#+end_src

[] is the list constructor and here is the map definition of the functor:

#+begin_src haskell
instance Functor [] where
  fmap = map
#+end_src

- Maybe

instance Function Maybe where
#+begin_src haskell
  fmap (Just a) = Just (f a)
  fmap Nothing = Nothing
#+end_src

* [[http://learnyouahaskell.com/input-and-output][Input and Output]]

* [[http://learnyouahaskell.com/functionally-solving-problems][Functionally solving problems]]

* [[http://learnyouahaskell.com/functors-applicative-functors-and-monoids][Functors, Applicative functors and monoids]]

* [[http://learnyouahaskell.com/a-fistful-of-monads][a fistful of monads]]

* [[http://learnyouahaskell.com/for-a-few-monads-more][For a few monads more]]

* [[http://learnyouahaskell.com/zippers][Zippers]]
