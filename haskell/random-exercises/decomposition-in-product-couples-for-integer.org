#+BLOG: tony-blog
#+POSTID: 970
#+DATE: [2013-01-29 mar. 20:11]
#+TITLE: Problem - Decomposition into a product of 2 numbers
#+AUTHOR: Massyl Nait-Mouloud, Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming, quickcheck, generating-testing
#+CATEGORY: haskell, exercises, functional-programming, quickcheck, generating-testing
#+DESCRIPTION: Find all the unique couple (a,b) that a*b = n, for n in N+. A first use of quickcheck to generate tests.
#+STARTUP: indent
#+STARTUP: hidestars
#+ATTR_HTML: border="2" rules="all" frame="border"

A friend of mine asks me to solve an exercise in haskell.
As I made a mistake in solving it the first time, due to the missed unicity, I considered posting it here.

* Problem
Here is the revised problem:

#+begin_quote
Find all the unique couple *(a,b)* such that *a*b = n*, for n in N+

*Note*
As the multiplication is commutative, we consider : *for any a, b, (a,b) == (b,a)*
#+end_quote

* Discussion

To avoid making duplicates *(a,b) /= (b,a)*, we can consider the input as a kind of pyramid instead of square.

#+begin_quote
for *n = 9* \\

  a in *1 2 3 4 5 6 7 8 9* (we can see a in rows)\\

  b in the range [a n] (b in columns) \\

  +1+ *2 3 4 5 6 7 8 9* \\
  +1 2+ *3 4 5 6 7 8 9* \\
  +1 2 3+ *4 5 6 7 8 9* \\
  +1 2 3 4+ *5 6 7 8 9* \\
  +1 2 3 4 5+ *6 7 8 9* \\
  +1 2 3 4 5 6+ *7 8 9* \\
  +1 2 3 4 5 6 7+ *8 9* \\
  +1 2 3 4 5 6 7 8+ *9* \\
  +1 2 3 4 5 6 7 8 9+
#+end_quote

So, again, the trick is to bound oneself.
What about using b in [a..n].

|-----+-----------------+-------------------------|
|   a | b in [a..n]     | a * b                   |
|-----+-----------------+-------------------------|
|   1 | 1 2 3 4 5 ... n | 1 2 3  4  5  6 ...   n  |
|   2 | . 2 3 4 5 ... n | . 4 6  8 10 12 ...  2n  |
|   3 | . . 3 4 5 ... n | . . 9 12 15 18 ...  3n  |
|   4 | . . . 4 5 ... n | . . . 16 20 24 ...  4n  |
|   5 | . . . . 5 ... n | . . . . 25 30  ...  5n  |
|   6 | . . . . . ... n | . . . . .  36  ...  6n  |
| ... | . . . . . ... n | . . . . . . .  ...      |
|   n | . . . . . ... n | . . . . . . .  ...  n^2 |
|-----+-----------------+-------------------------|

Seems right.
But then again, we could limit the range [a..n] to [a..sqrt n].

* algorithm

#+begin_src haskell
isqrt :: Int -> Int
isqrt = floor . sqrt . fromIntegral

couple :: Int -> [(Int, Int)]
couple n = [(a,b) | a <- [1..isqrt n], b <- [a..n], a * b == n]
#+end_src

I can do some repl to check the output:

#+begin_src haskell
*Couple> couple 10
[(1,10),(2,5)]
*Couple> couple 12
[(1,12),(2,6),(3,4)]
*Couple> couple 24
[(1,24),(2,12),(3,8),(4,6)]
*Couple> couple 100
[(1,100),(2,50),(4,25),(5,20),(10,10)]
*Couple> couple 1000
[(1,1000),(2,500),(4,250),(5,200),(8,125),(10,100),(20,50),(25,40)]
*Couple> couple 1000
[(1,1000),(2,500),(4,250),(5,200),(8,125),(10,100),(20,50),(25,40)]
*Couple> couple 10000
[(1,10000),(2,5000),(4,2500),(5,2000),(8,1250),(10,1000),(16,625),(20,500),(25,400),(40,250),(50,200),(80,125),(100,100)]
#+end_src

Seems ok to me...

source: [[https://github.com/ardumont/my-haskell-lab/blob/master/src/couple.hs][couple.hs]]

* Quickcheck

Now that we have the algorithm, we can use Quickcheck to help up in generating the tests.

** why

I love to develop. The applications, the design, the performance, etc..., it's fun.

But then I also need to test the application, to ensure that this does what I think it does.

So I develop the application then for testing the application, I develop the unit/integration tests...

But then again, what has all in common the applications that crashed in production?
It passes the tests!!! (go see [[http://www.infoq.com/presentations/Are-We-There-Yet-Rich-Hickey][Rich Hickey's videos, it's way fun]]).

Indeed, we also develop the tests, so let me ask this, who's gonna test the tests? and then... the tests of the tests... and...

Another solution could be to generate some of the integration tests.

In [[http://www.haskell.org/haskellwiki/Haskell][Haskell]], enters [[http://www.haskell.org/haskellwiki/Introduction_to_QuickCheck2][quickcheck]].

** how

For using quickcheck, we need to define the properties of our algorithm:

- for all a,b in [(a,b) | n <- [1..], couple n], a * b == n
- for all n,m in N+ x N+, couple n == couple m
- for all a,b in [(a,b) | n <- [1..], couple n], a <= isqrt n

Now we tell quickcheck to generate data and check those properties:

#+begin_src haskell
prop_productOk = (\ n -> all (\ (a,b) -> a * b == n ) (couple n))
prop_coupleIdempotence = (\ x y -> couple x == couple y)
prop_coupleInfSqrt = (\ n -> all (\ (a,b) -> a <= isqrt n ) (couple n))

-- adding
main = do
  verboseCheckWith stdArgs { maxSuccess = 1000, maxSize = 5 } prop_productOk
  verboseCheckWith stdArgs { maxSuccess = 1000, maxSize = 5 } prop_coupleIdempotence
  verboseCheckWith stdArgs { maxSuccess = 1000, maxSize = 5 } prop_coupleInfSqrt
#+end_src

Here, I ask to chain the checking of each properties in limiting the number of success to 1000 and the size of the input.

This could [[http://hackage.haskell.org/packages/archive/QuickCheck/2.4.1.1/doc/html/Test-QuickCheck.html][be adapted for more hard checking!]]

** output

Here is a sample output:
#+begin_src haskell
*Couple> main
Passed:
0
Passed:
-1
Passed:
-1
Passed:
1
Passed:
0
Passed:
-8
Passed:
0
Passed:
14
Passed:
16
Passed:
3
+++ OK, passed 10 tests.
Passed:
-1
Passed:
0
Passed:
2
Passed:
1
Passed:
0
Passed:
1
Passed:
-5
Passed:
11
Passed:
16
Passed:
-10
+++ OK, passed 10 tests.
Passed:
-1
Passed:
-1
Passed:
0
Passed:
2
Passed:
1
Passed:
-6
Passed:
-3
Passed:
6
Passed:
-12
Passed:
24
+++ OK, passed 10 tests.
#+end_src

As we saw OK for all tests, we are more serene for delivering this code :D
