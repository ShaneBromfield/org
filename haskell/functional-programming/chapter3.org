#+BLOG: tony-blog
#+TITLE: FAIH - Ch3 - Exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+TAGS: haskell, exercises, functional-programming
#+CATEGORY: haskell, programming, functional-programming
#+DESCRIPTION: Chapter 3 - The efficiency of functional programs
#+STARTUP: indent
#+STARTUP: hidestars odd

* Strict evaluation
#+begin_quote
Considering the function call =f a b=, how would you force the strict evaluation of a only, b only, and both a and b?
#+end_quote

* power
#+begin_quote
Computing the power of a number x can be achieved using the following function:
#+end_quote
#+begin_src haskell
power :: (Integral a1, Num a) => a -> a1 -> a
power x k = if k == 0
            then 1
            else if (k `mod` 2) == 0
                 then power (x*x) (k `div` 2)
                 else x * power (x*x) (k `div` 2)
#+end_src
#+begin_quote
Perform a simple time and space efficiency analysis of the function.
#+end_quote
* steps
#+begin_quote
Assume a list of length n in which every item requires O(m) steps to be computed.
Suppose that the functions =length=, =head= and =sum= need to be applied to this list.
How many steps would they take (in asymptotic terms) in each of the following cases:

a) a lazy list,

b) a list in which all tails are strictly evaluated.

c) a list in which all heads and all tails are strictly evaluated.
#+end_quote
* tail-recursion
#+begin_quote
Consider the following program:
#+end_quote
#+begin_src haskell
prodsum :: (Eq a, Num a) => a -> a
prodsum x = prod x + sum x

prod :: (Eq a, Num a) => a -> a
prod 0 = 1
prod n = n * prod (n-1)

sum :: (Eq a, Num a) => a -> a
sum 0 = 0
sum n = n + sum (n-1)
#+end_src
#+begin_quote
a) Change the definition of =sum= and =prod= into tail-recursive ones.

b) Using the Burstall-Darlington transformation system, write a new definition of =prodsum= (using tuples) such that the result is computed in one pass.

c) Change this definition into one that avoids using tuples and which is tail-recursive.
#+end_quote
