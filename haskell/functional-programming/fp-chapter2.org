#+LAYOUT: post
#+DATE: 2013-06-01 Sat. 17:11
#+TITLE: Functional Approach in Haskell - Ch2 - Exercises
#+AUTHOR: Antoine R. Dumont
#+OPTIONS:
#+CATEGORIES: haskell, programming, functional-programming
#+DESCRIPTION: Functional Approach in Haskell - Ch. 2 - Functional programming in Haskell - exercises
#+STARTUP: indent
#+STARTUP: hidestars odd

Now that i know a little more about haskell, I can go and refresh my memory about algorithms but the functional way.
So, I came accross functional approach in haskell which does exactly that.

Here are the first exercises (focused on haskell for the moment).

* Simple
#+begin_quote
Using a haskell interpreter, evaluate the following expressions (try to predict the result):
(1+2)
if (2 > 9) then "hello" else "bye"
let x=(sqrt 16) in x+1
#+end_quote

#+begin_src haskell
(1+2)                               - 3
if (2 > 9) then "hello" else "bye"  - "bye"
let x=(sqrt 16) in x+1              -  5.0

#+end_src

Interpreter:
#+begin_src haskell
*Ch1> 1 + 2
3
*Ch1> if (2 > 9) then "hello" else "bye"
"bye"
*Ch1> let x=(sqrt 16) in x+1
5.0
#+end_src

*
#+begin_quote
Define and load the following function:
=fact 1 = 1=
=fact n = n * fact (n-1)=

a) Using the interpreter, evaluate the expression =fact 5=
b) What happens when you try to evaluate =fact 0=? Alter the above definition to solve this definition.
c) Modify your definition such that the value -1 is returned when an attempt is made to compute the factorial of a negative value.
#+end_quote

a)
#+begin_src haskell
*Ch1> fact 5
120
#+end_src

b)
- the function does not terminate
- alter:
#+begin_src haskell
fact :: Int -> Int
fact 0 = 1
fact n = n * fact (n-1)
#+end_src

c)
Compute factorial of a negative value must render -1:
#+begin_src haskell
fact :: Int -> Int
fact n
  | n < 0     = -1
  | n == 0    = 1
  | otherwise = n * fact (n-1)

*Ch1> fact 0
1
*Ch1> fact 1
1
*Ch1> fact 5
120
*Ch1> fact (-10)
-1
#+end_src

* wrong
#+begin_quote
What is wrong with the following expressions? Can you change them to make them valid?

1:2:3
[ [2,3] ++ [], [2,3]:[] ]
"hello" : "world"
#+end_quote

#+begin_src haskell
*Ch1> (1:2:3:[])
[1,2,3]
*Ch1> [[[2,3] ++ []], ([2,3]:[])]
[[[2,3]],[[2,3]]]
*Ch1> "hello" ++ "world"
"helloworld"
#+end_src

* reverse
#+begin_quote
Given the following function:
#+end_quote
#+begin_src haskell
f l = reverse (f' l [])
      where f' [] r     = r
            f' (x:xs) r = (2*x) : (f' xs r)
#+end_src
#+begin_quote
What is the value of =f [1,2,3,4])= ?
Check your answer with the haskell interpreter.
#+end_quote

Answer step by step:
#+begin_src haskell
f [1,2,3,4] = reverse (f' [1,2,3,4] [])
            = reverse ((2*1) : (f' [2,3,4] []))
            = reverse (2 : (2*2) : (f' [3,4] []))
            = reverse (2 : 4 : (2*3) : (f' [4] []))
            = reverse (2 : 4 : 6 : (4*2) : (f' [] []))
            = reverse (2 : 4 : 6 : 8 : [])
            = [8,6,4,2]
#+end_src

Interpreter:
#+begin_src haskell
*Ch1> f [1..4]
[8,6,4,2]
#+end_src

* Predict
#+begin_quote
Try to predict the value of the following expressions:
=[1,2,3] ++ [4]=
=1:(2:(3:[4]))=
=head [1,2,3]=
=tail [1,2,3]=
=drop 4 [1,2,3,4,5]=
=[1,2,3,4] !! 2=
#+end_quote

#+begin_src haskell
[1,2,3] ++ [4]          -- [1,2,3,4]
1:(2:(3:[4]))           -- [1,2,3,4]
head [1,2,3]            -- 1
tail [1,2,3]            -- [2,3]
drop 4 [1,2,3,4,5]      -- [5]
[1,2,3,4] !! 2          -- 3
#+end_src

* functions
#+begin_quote
Write Haskell functions for:
a) computing the average value of a list of numbers;
b) selecting the middle element in a list (assuming an odd-length list).
#+end_quote

a)
#+begin_src haskell
avg :: [Int] -> Int
avg xs | null xs   = 0
       | otherwise = (sum xs) `div` (length xs)

*Ch1> avg [1..10]
5
*Ch1> avg []
0
#+end_src

b)
#+begin_src haskell
mdl :: [a] -> Maybe a
mdl xs | null xs   = Nothing
       | otherwise = Just (xs !! p)
                     where p = ((subtract 1) . (`div` 2) . length) xs

*Ch1> mdl [1..10]
Just 5
*Ch1> mdl [1..20]
Just 10
*Ch1> mdl []
Nothing
#+end_src

* predict
#+begin_quote
a) Try to predict the value of each of the following expressions:
=[(x,y) | x <- [1..2], y <- [2..5], (x+y) /= 4]=
=[x | x <- [1..10], x `mod` 2 == 0]=
#+end_quote

All the couple (x,y), such that x in [1,2] and y in [2,3,4,5) and that x+y is not 4:
#+begin_src haskell
[(x,y) | x <- [1..2], y <- [2..5], (x+y) /= 4] -- [(1,2), (1,4), (1,5),
                                                   (2,3), (2,4), (2,5)]
#+end_src

All even numbers in [1..10]:
#+begin_src haskell
[x | x <- [1..10], x `mod` 2 == 0] = [2,4,6,8,10]
#+end_src

Interpreter:
#+begin_src haskell
*Ch1> [(x,y) | x <- [1..2], y <- [2..5], (x+y) /= 4]
[(1,2),(1,4),(1,5),(2,3),(2,4),(2,5)]
*Ch1> [x | x <- [1..10], x `mod` 2 == 0]
[2,4,6,8,10]
#+end_src

#+begin_quote
b) Define each of the following lists using a list comprehension:
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
[2,-3,4,-5,6,-7,8,-9,10,-11]
#+end_quote

Answer:
#+begin_src haskell
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15] = [1..15]
                                      =  [x | x <- [1..15]]

*Ch1> [x | x <- [1..15]]
[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]
#+end_src

#+begin_src haskell
[2,-3,4,-5,6,-7,8,-9,10,-11] = [ if odd x then -1 * x else x | x <- [2..11]]

*Ch1> [ if odd x then -1 * x else x | x <- [2..11]]
[2,-3,4,-5,6,-7,8,-9,10,-11]
#+end_src

* list comprehension
#+begin_quote
a) Using a list comprehension, define a function neg that counts the number of negative values in a list. For example:
=neg [1, -9, 5, 4, -6, 0] = 3=
b) Using a list comprehension, define the function rep that takes an argument n and returns a list in which 1 occurs one time, 2 occurs 2 two and so one until n occurs n time. For example:
=rep 4 => [1,2,2,3,3,3,4,4,4,4]
#+end_quote

a)

#+begin_src haskell
neg :: [Int] -> Int
neg xs = sum [1 | x <- xs, x < 0 ]

*Ch1> neg [1, -9, -5, 4, -6, 0]
3
#+end_src

b)
#+begin_src haskell
rep :: Int -> [Int]
rep n = [ y | x <- [1..n], y <- replicate x x]

*Ch1> rep 0
[]
*Ch1> rep 1
[1]
*Ch1> rep 2
[1,2,2]
*Ch1> rep 3
[1,2,2,3,3,3]
*Ch1> rep 4
[1,2,2,3,3,3,4,4,4,4]
#+end_src

* string2int
#+begin_quote
Define a function =string2int= that converts a string of digits into the corresponding integer.
For example:
string2int "3454" = 3454
string2int "76"   = 76
#+end_quote

#+begin_src haskell
string2int :: String -> Int
string2int xs = sum [ ((* u) . digitToInt) x | (u, x) <- zip unit (reverse xs)]
                where unit = iterate (* 10) 1

*Ch1> string2int "123"
123
*Ch1> string2int "3434"
3434
*Ch1> string2int "3454"
3454
*Ch1> string2int "76"
76
#+end_src

Or we could use the standard function =read :: Read a => String -> a=

* Predict
#+begin_quote
Try to predict the values of the following expressions:
#+end_quote
#+begin_src haskell
map fst [(1,2), (3,8), (0,6), (3,1)]

(foldr f 0 l, foldl f 0 l)
  where l = [6,9,8,3,10]
        f x y = (x+y) `div` 2

foldr (++) [] [[1,2,3], [4,5,6], [], [7]]
#+end_src

a)

Recall the definition of:
#+begin_src haskell
fst :: (a,b) -> a
fst (x,_) = x

map :: (a -> b) -> [a] -> [b]
map _ []     = []
map f (x:xs) = f x : map f xs

-- or using list comprehension:
map f xs = [ f x | x <- xs]
#+end_src

We can then conclude:
#+begin_src haskell
map fst [(1,2), (3,8), (0,6), (3,1)] = [1,3,0,3]
#+end_src

b)
Again recall the definition of foldr:
#+begin_src haskell
foldr :: (a -> b -> b) -> b -> [a] -> b
foldr _ x []     = x
foldr f x (y:ys) = f y $ foldr f x ys
#+end_src

Thus:
#+begin_src haskell
foldr f 0 l = foldr f 0 [6,9,8,3,10]
            = f 6 (foldr f 0 [9,8,3,10])
            = f 6 (f 9 (foldr f 0 [8,3,10]))
            = ...
            = f 6 (f 9 (f 8 (f 3 (f 10 0))))
            = f 6 (f 9 (f 8 (f 3 (10+0 `div` 2))))
            = f 6 (f 9 (f 8 (f 3 5)))
            = f 6 (f 9 (f 8 (3 + 4 `div` 2)))
            = f 6 (f 9 (f 8 3))
            = f 6 (f 9 5)
            = f 6 7
            = 6
#+end_src

Now the right operand, using foldl as operations:
#+begin_src haskell
foldl :: (a -> b -> a) -> a -> [b] -> a
foldl _ x []     = x
foldl f x (y:ys) = foldl f (f x y) ys
#+end_src

Thus (I do not forget that haskell is lazy, just bear with me)
#+begin_src haskell
foldl f 0 l = foldl f 0        [6,9,8,3,10]
            = foldl f (f 0 6)  [9,8,3,10]
            = foldl f (f 1 9)  [8,3,10]
            = foldl f (f 5 8)  [3,10]
            = foldl f (f 6 3)  [10]
            = foldl f (f 5 10) []
            = foldl f 7        []
            = 7
#+end_src

to conclude:
#+begin_src haskell
(foldr f 0 l, foldl f 0 l)
  where l = [6,9,8,3,10]
        f x y = (x+y) `div` 2 -- (6,7)

#+end_src

Indeed:
#+begin_src haskell
tmp :: (Integer, Integer)
tmp = (foldr f 0 l, foldl f 0 l)
  where l = [6,9,8,3,10]
        f x y = (x+y) `div` 2

*Ch1> tmp
(6,7)
#+end_src

* type
#+begin_quote
What is the type of the following function?
=compose f g x = f (g x)=
#+end_quote

As we can see from the definition of compose:
- f and g takes one parameter each.
- f takes the output type of g as input.

We can sum up the definition of g and f:
#+begin_src haskell
g :: a -> b
f :: b -> c
#+end_src

Thus:
#+begin_src haskell
compose :: (b -> c) -> (a -> b) -> a -> c
#+end_src

Check:

#+begin_src haskell
compose :: (b -> c) -> (a -> b) -> a -> c
compose f g x = f (g x)
#+end_src

Using =compose=, we could redefine the =string2int= function from earlier:
#+begin_src haskell
string2int' :: String -> Int
string2int' xs = sum [ compose (* u) digitToInt x | (u, x) <- zip unit (reverse xs)]
                 where unit = iterate (* 10) 1
#+end_src

The standard composition function is (.)
#+begin_src haskell
*Ch1> :t (.)
(.) :: (b -> c) -> (a -> b) -> a -> c
#+end_src

* matrix
#+begin_quote
Given the matrix:
| 2 3 4  |
| 5 6 7  |
| 8 9 10 |
a) Define a function that transposes a square matrix of size 3.
If applied to the previous matrix, the result should be:
| 2 5 8  |
| 3 6 9  |
| 4 7 10 |
b) Extends this definition for a matrix of any size
#+end_quote

a)
#+begin_src haskell
transpose3 :: [[a]] -> [[a]]
transpose3 xs = map (\ n -> map (!! n) xs) [0..2]

*Ch1> transpose3 [[1,2,3], [4,5,6], [7,8,9]]
[[1,4,7],[2,5,8],[3,6,9]]
#+end_src

b)
#+begin_src haskell
transpose :: [[a]] -> [[a]]
transpose xs = map (\ n -> map (!! n) xs) [0..l]
               where l = length xs - 1

*Ch1> transpose [[1,2,3], [4,5,6], [7,8,9]]
[[1,4,7],[2,5,8],[3,6,9]]
*Ch1> transpose [[1,2,3,4], [5,6,7,8], [9,10,11,12], [13,14,15,16]]
[[1,5,9,13],[2,6,10,14],[3,7,11,15],[4,8,12,16]]
#+end_src

* type
Determine the type definitions (with the context) of the following functions:
#+begin_src haskell
cube x = x * x * x

maxi x y | x >= y = x
         | otherwise = y

sumAtoB a b = sum [a..b]
#+end_src

We must be able to compute the multiplication on x, so this must be of type Num.
#+begin_src haskell
cube :: Num a => a -> a
cube x = x * x * x
#+end_src

We must be able to compare the number, so type Ord.
#+begin_src haskell
maxi :: (Ord a) => a -> a -> a
maxi x y | x >= y = x
         | otherwise = y
#+end_src

We must be able to compute the sum, so Num type and use a list comprehension, so Enum type.
#+begin_src haskell
sumAtoB :: (Num a, Enum a) => a -> a -> a
sumAtoB a b = sum [a..b]
#+end_src
